-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[TRAIT_FACTURES_EASYFOLDER]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

DECLARE @DT DATE
SET @DT = CONVERT(DATE, CONVERT(VARCHAR(10),GETDATE(),103), 103)

IF OBJECT_ID('TEMPDB..#TRAIT_FACTURES') IS NOT NULL 
	DROP TABLE #TRAIT_FACTURES;

CREATE TABLE #TRAIT_FACTURES(
	[CLE] [varchar](26) NULL,
	[CJOURNAL] [varchar](6) NULL,
	[CD_ANNEE] [int] NULL,
	[NOPRE] [varchar](16) NULL,
	[MTHT] [numeric](17, 2) NULL,
	[MTTTC] [numeric](17, 2) NULL,
	[MTTVA] [numeric](17, 2) NULL,
	[DATFAC] [date] NULL,
	[REF_BT_CTR_GO] [varchar](50) NULL,
	[RESP_IMMB] [varchar](8000) NULL,
	[GEST_IMMB] [varchar](8000) NULL,
	[TECH_IMMB] [varchar](8000) NULL,
	[TECH_GO] [varchar](8000) NULL,
	[CGROUPE] [int] NULL,
	[LGROUPE] [varchar](64) NULL,
	[TYPBON] [varchar](9) NULL,
	[LTIERS] [varchar](76) NULL,
	[CTIERS] [varchar](14) NULL,
	[CRIT_ENG] [varchar](50) NULL,
	[SCRIT_ENG] [varchar](50) NULL,
	[MT_ENG] [numeric](17, 2) NULL,
	[REF] [varchar](42) NULL,
	[REMPLOY] [int] NULL,
	[CEMPLOY] [int] NULL,
	[TEMPLOY] [int] NULL,
	[TRESP] [varchar](14) NULL,
	[CMANDAT] [varchar](16) NULL,
	[CTRANCHE] [int] NULL,
	[CVENTPCHAR] [int] NULL,
	[CDEPR] [int] NULL,
	[CORG] [varchar](4) NULL,
	[CAGENCE] [varchar](4) NULL,
	[NOPIECE] [varchar](16) NULL
);

with REQ1 as
(
	select CAST(datepart(year, ENTFAC.DATENREG) As VARCHAR(4)) + upper(ENTFAC.CJOURNAL) + ENTFAC.NOPRE CLE
		 , upper(ENTFAC.CJOURNAL) CJOURNAL
		 , datepart(year, ENTFAC.DATENREG) CD_ANNEE
		 , ENTFAC.NOPRE
		 , isnull(ENTFAC.MTHT, 0) MTHT
		 , isnull(ENTFAC.MTTTC, 0) MTTTC
		 , isnull(ENTFAC.MTTVA, 0) MTTVA
		 , ENTFAC.DATFAC
		 , CAST(case when ENTFAC.COPE is not null then ENTFAC.COPE else BT_CTR_GO.NOBON end as VARCHAR(50)) REF_BT_CTR_GO
		 , GEST.RESP_IMMB
		 , GEST.GEST_IMMB
		 , GEST.TECH_IMMB
		 , TECH_GO.TECH_GO
		 , GROUPE.CGROUPE
		 , GROUPE.LGROUPE
		 , case when ENTFAC.COPE is not null then 'Operation' else case when BT_CTR_GO.TYPBON = 'BT' then 'BT' when BT_CTR_GO.TYPBON = 'CTR' then 'Contrat' end end TYPBON
		 , TIERS.LTIERS
		 , ENTFAC.CTIERS
		 , ENTFAC.REF
		 , GEST.REMPLOY
		 , GEST.CEMPLOY
		 , GEST.TEMPLOY
		 , TECH_GO.TRESP
		 , ENTFAC.CMANDAT
		 , ENTFAC.CTRANCHE
		 , ENTFAC.CVENTPCHAR
		 , ENTFAC.CDEPR
		 , ENTFAC.CORG
		 , GROUPE.CAGENCE
		 , ENTFAC.NOPIECE
		 , ENTFAC.DATENREG
		 , CAST(ENTFAC.COPE AS VARCHAR(50)) COPE
	from MASTER_ESTIA..ESTIA_ENTFAC ENTFAC
	left join 
	(
		SELECT PK_MANGES, PK_GROUPE, CMANDAT, CORG, CAGENCE, CGROUPE
		FROM (SELECT MANGES.PK_MANGES, MANGES.CMANDAT, MANPAT.FK_GROUPE PK_GROUPE, MANPAT.CORG, MANPAT.CAGENCE, MANPAT.CGROUPE,
					 RANK() OVER (PARTITION BY MANGES.CMANDAT
								  ORDER BY MANGES.CMANDAT, MANPAT.CORG, MANPAT.CAGENCE, MANPAT.CGROUPE, PK_MANPAT) AS RK
			  FROM ESTIA_MANGES AS MANGES
				   INNER JOIN ESTIA_MANPAT AS MANPAT
						 ON MANPAT.CMANDAT = MANGES.CMANDAT
			  WHERE MANPAT.FK_GROUPE IS NOT NULL AND CONVERT(DATETIME, CONVERT(VARCHAR(10), GETDATE(), 103), 103) BETWEEN ISNULL(MANGES.DEFFET, '19000101') AND 
							  '29990101') AS TMP
		WHERE RK = 1
	) WGM
	on WGM.CMANDAT = ENTFAC.CMANDAT
	left join MASTER_ESTIA..ESTIA_GROUPE GROUPE
	on GROUPE.PK_GROUPE = WGM.PK_GROUPE
	left join
	(
		select MANGES.CMANDAT
			 , MANGES.CEMPLOY
			 , lower(concat(GEST_IMMB.PRENOM, case when charindex('#', GEST_IMMB.LEMPLOY) > 0 then replace(GEST_IMMB.LEMPLOY, '#', '.') else '.'+GEST_IMMB.LEMPLOY end)) GEST_IMMB
			 , MANGES.TEMPLOY
			 , lower(concat(TECH_IMMB.PRENOM, case when charindex('#', TECH_IMMB.LEMPLOY) > 0 then replace(TECH_IMMB.LEMPLOY, '#', '.') else '.'+TECH_IMMB.LEMPLOY end)) TECH_IMMB
			 , REMPLOY 
			 , lower(concat(RESP_IMMB.PRENOM, case when charindex('#', RESP_IMMB.LEMPLOY) > 0 then replace(RESP_IMMB.LEMPLOY, '#', '.') else '.'+RESP_IMMB.LEMPLOY end)) RESP_IMMB
		from MASTER_ESTIA..ESTIA_MANGES MANGES
		left join MASTER_ESTIA..ESTIA_EMPLOY GEST_IMMB
		on GEST_IMMB.CEMPLOY = MANGES.CEMPLOY
		left join MASTER_ESTIA..ESTIA_EMPLOY TECH_IMMB
		on TECH_IMMB.CEMPLOY = MANGES.TEMPLOY
		left join MASTER_ESTIA..ESTIA_EMPLOY RESP_IMMB
		on RESP_IMMB.CEMPLOY = MANGES.REMPLOY
		where MANGES.CORG = '11'
	) GEST
	on GEST.CMANDAT = ENTFAC.CMANDAT
	left join
	(
		select distinct PIOPE.CORG
			 , PIOPE.COPE
			 , PIOPE.CTRANCHE
			 , PIOPE.TRESP 
			 , lower(concat(TIERS.PRENOM, case when charindex('#', TIERS.NOM) > 0 then replace(TIERS.NOM, '#', '.') else '.'+TIERS.NOM end)) TECH_GO
		from MASTER_ESTIA..ESTIA_PIOPE PIOPE
		left join MASTER_ESTIA..ESTIA_TIERS TIERS
		on TIERS.CTIERS = PIOPE.TRESP
		where PIOPE.CORG = '11'
		and PIOPE.TRESP is not null
	) TECH_GO
	on TECH_GO.CORG = ENTFAC.CORG and TECH_GO.COPE = ENTFAC.COPE and TECH_GO.CTRANCHE = ENTFAC.CTRANCHE
	left join MASTER_ESTIA..ESTIA_TIERS TIERS
	on TIERS.CTIERS = ENTFAC.CTIERS
	left join
	(
		select distinct LIENBN.CORG, LIENBN.REF, LIENBN.TYPBON, CAST(LIENBN.[0BON] AS VARCHAR(50)) NOBON
		from MASTER_ESTIA..ESTIA_LIENBN LIENBN
		where LIENBN.TYPFAC = 'F'
		and LIENBN.CORG = '11'
		and LIENBN.TYPBON = 'BT'
		union
		select distinct LIENBN.CORG, LIENBN.REF, LIENBN.TYPBON, substring(LIENBN.BANAL, 1, 12) NOBON
		from MASTER_ESTIA..ESTIA_LIENBN LIENBN
		where LIENBN.TYPFAC = 'F'
		and LIENBN.CORG = '11'
		and LIENBN.TYPBON = 'CTR'
	) BT_CTR_GO
	on BT_CTR_GO.REF = ENTFAC.REF
	where ENTFAC.CORG = '11'
	and (ISNULL(LEFT(ENTFAC.COPE, 4), '2999') >= 2018)
	and DATEPART(YEAR, ENTFAC.DATFAC) >= 2018
	and ENTFAC.NOPRE is not null
	and rtrim(ltrim(ENTFAC.NOPRE)) <> ''
),
REQ2 as
(
	select REQ1.CLE
		 , REQ1.CJOURNAL
		 , REQ1.CD_ANNEE
		 , REQ1.NOPRE
		 , REQ1.MTHT
		 , REQ1.MTTTC
		 , REQ1.MTTVA
		 , REQ1.DATFAC
		 , REQ1.REF_BT_CTR_GO
		 , REQ1.RESP_IMMB
		 , REQ1.GEST_IMMB
		 , REQ1.TECH_IMMB
		 , REQ1.TECH_GO
		 , REQ1.CGROUPE
		 , REQ1.LGROUPE
		 , REQ1.TYPBON
		 , REQ1.LTIERS
		 , REQ1.CTIERS
		 , case when REQ1.COPE is not null then CAST(CRIT_GO.CCRITDP AS VARCHAR(50)) else case when REQ1.TYPBON = 'BT' then CAST(CRIT_BT.CCRITDP AS VARCHAR(50)) when REQ1.TYPBON = 'Contrat' then CAST(CRIT_CONTRAT.CCRITDP AS VARCHAR(50)) end end CRIT_ENG
		 , case when REQ1.COPE is not null then CAST(CRIT_GO.CSCRITDP AS VARCHAR(50)) else case when REQ1.TYPBON = 'BT' then CAST(CRIT_BT.CSCRITDP AS VARCHAR(50)) when REQ1.TYPBON = 'Contrat' then CAST(CRIT_CONTRAT.CSCRITDP AS VARCHAR(50)) end end SCRIT_ENG
		 , REQ1.REF
		 , REQ1.REMPLOY
		 , REQ1.CEMPLOY
		 , REQ1.TEMPLOY
		 , REQ1.TRESP
		 , REQ1.CMANDAT
		 , REQ1.CTRANCHE
		 , REQ1.CVENTPCHAR
		 , REQ1.CDEPR
		 , REQ1.CORG
		 , REQ1.CAGENCE
		 , REQ1.NOPIECE
		 , REQ1.DATENREG
	from REQ1
	left join
	(
		select distinct RES.CORG, RES.CCONTFRS, 
		STUFF((
				select '/ ' + CAST(RES2.CCRITDP AS VARCHAR(MAX))
				from MASTER_ESTIA..ESTIA_VENTPCHA RES2
				where (RES2.CORG = RES.CORG AND RES2.CCONTFRS = RES.CCONTFRS AND RES2.PRINCIPAL = 1)
				group by RES2.CORG, RES2.CCONTFRS, RES2.CCRITDP, RES2.PRINCIPAL
				for xml path(''), TYPE).value('.','VARCHAR(MAX)'),1,2,'') AS CCRITDP,
		STUFF((
				select '/ ' + CAST(RES3.CSCRITDP AS VARCHAR(MAX))
				from MASTER_ESTIA..ESTIA_VENTPCHA RES3
				where (RES3.CORG = RES.CORG AND RES3.CCONTFRS = RES.CCONTFRS AND RES3.PRINCIPAL = 1)
				group by RES3.CORG, RES3.CCONTFRS, RES3.CSCRITDP, RES3.PRINCIPAL
				for xml path(''), TYPE).value('.','VARCHAR(MAX)'),1,2,'') AS CSCRITDP
		from MASTER_ESTIA..ESTIA_VENTPCHA RES
		where RES.CORG = '11' and RES.PRINCIPAL = 1
		group by RES.CORG, RES.CCONTFRS
	) CRIT_CONTRAT
	on CRIT_CONTRAT.CCONTFRS = case when REQ1.TYPBON = 'Contrat' then REQ1.REF_BT_CTR_GO end
	left join
	(
		select distinct RES.CORG, RES.NOBON,
		STUFF((
				select '/ ' + CAST(RES3.CCRITDP AS VARCHAR(MAX))
				from MASTER_ESTIA..ESTIA_ECRIB RES3
				where (RES3.CORG = RES.CORG AND RES3.NOBON = RES.NOBON AND RES3.CSTE = 'EG' AND RES3.CTRAIT = 'LBT')
				group by RES3.CORG, RES3.NOBON, RES3.CCRITDP
				for xml path(''), TYPE).value('.','VARCHAR(MAX)'),1,2,'') AS CCRITDP,
		STUFF((
				select '/ ' + CAST(RES2.CSCRITDP AS VARCHAR(MAX))
				from MASTER_ESTIA..ESTIA_ECRIB RES2
				where (RES2.CORG = RES.CORG AND RES2.NOBON = RES.NOBON AND RES2.CSTE = 'EG' AND RES2.CTRAIT = 'LBT')
				group by RES2.CORG, RES2.NOBON, RES2.CSCRITDP
				for xml path(''), TYPE).value('.','VARCHAR(MAX)'),1,2,'') AS CSCRITDP
		from MASTER_ESTIA..ESTIA_ECRIB RES
		where RES.CORG = '11'
		and RES.TYPBON = 'BT'
		and RES.CSTE in ('EG')
		and CTRAIT in ('LBT')
		group by RES.CORG, RES.NOBON, RES.CCRITDP
	) CRIT_BT
	on CRIT_BT.NOBON = case when REQ1.TYPBON = 'BT' then REQ1.REF_BT_CTR_GO end
	left join
	(
		-- modif MNA : ajout de la tranche - 20190417
		select distinct RES.CORG, RES.COPE, RES.CTRANCHE, RES.CDEPR, RES.CCRITDP,
		STUFF((
				select '/ ' + CAST(RES2.CSCRITDP AS VARCHAR(MAX))
				from MASTER_ESTIA..ESTIA_PCRITDEP RES2
				where (RES2.CORG = RES.CORG AND RES2.COPE = RES.COPE AND RES2.CTRANCHE = RES.CTRANCHE AND RES2.CDEPR = RES.CDEPR AND RES2.CCRITDP = RES.CCRITDP)
				group by RES2.CORG, RES2.COPE, RES2.CDEPR, RES2.CSCRITDP
				for xml path(''), TYPE).value('.','VARCHAR(MAX)'),1,2,'') AS CSCRITDP
		from MASTER_ESTIA..ESTIA_PCRITDEP RES
		where RES.CORG = '11'
		group by RES.CORG, RES.COPE, RES.CTRANCHE, RES.CDEPR, RES.CCRITDP
	) CRIT_GO
	on CRIT_GO.CORG = REQ1.CORG and CRIT_GO.COPE = REQ1.COPE AND REQ1.CTRANCHE = CRIT_GO.CTRANCHE and CRIT_GO.CDEPR = REQ1.CDEPR
)

insert into #TRAIT_FACTURES(CLE , CJOURNAL , CD_ANNEE , NOPRE , MTHT , MTTTC , MTTVA , DATFAC , REF_BT_CTR_GO , RESP_IMMB , GEST_IMMB , TECH_IMMB , TECH_GO, CGROUPE , LGROUPE , TYPBON , LTIERS , CTIERS , CRIT_ENG , SCRIT_ENG , MT_ENG, REF , REMPLOY , CEMPLOY , TEMPLOY , TRESP , CMANDAT , CTRANCHE , CVENTPCHAR , CDEPR , CORG , CAGENCE , NOPIECE)
select REQ1.CLE
		 , REQ1.CJOURNAL
		 , REQ1.CD_ANNEE
		 , REQ1.NOPRE
		 , REQ1.MTHT
		 , REQ1.MTTTC
		 , REQ1.MTTVA
		 , REQ1.DATFAC
		 , REQ1.REF_BT_CTR_GO
		 , REQ1.RESP_IMMB
		 , REQ1.GEST_IMMB
		 , REQ1.TECH_IMMB
		 , REQ1.TECH_GO
		 , REQ1.CGROUPE
		 , REQ1.LGROUPE
		 , REQ1.TYPBON
		 , REQ1.LTIERS
		 , REQ1.CTIERS
		 , REQ2.CRIT_ENG
		 , REQ2.SCRIT_ENG
		 , CAST(0 AS NUMERIC(17, 2)) MT_ENG
		 , REQ1.REF
		 , REQ1.REMPLOY
		 , REQ1.CEMPLOY
		 , REQ1.TEMPLOY
		 , REQ1.TRESP
		 , REQ1.CMANDAT
		 , REQ1.CTRANCHE
		 , REQ1.CVENTPCHAR
		 , REQ1.CDEPR
		 , REQ1.CORG
		 , REQ1.CAGENCE
		 , REQ1.NOPIECE
from REQ1
inner join REQ2 on REQ2.NOPRE = REQ1.NOPRE and REQ2.CJOURNAL = REQ1.CJOURNAL and REQ2.DATENREG = REQ1.DATENREG

update #TRAIT_FACTURES
	set MT_ENG = ENG_CONTRAT.MT_ENG
from #TRAIT_FACTURES TF
left join
(
	select CONTNAT.CORG
			, CONTNAT.CCONTFRS 
			, SUM(CONTNAT.MTHT + ISNULL(AVENAN.MTHT, 0)) MT_ENG
	from MASTER_ESTIA..ESTIA_CONTNAT CONTNAT
	left join 
	(
		select CCONTFRS, MTHT
		from MASTER_ESTIA..ESTIA_AVENAN 
		where CORG = '11'
		and DSIGN is not NULL
	) AVENAN
	on AVENAN.CCONTFRS = CONTNAT.CCONTFRS
	where CONTNAT.CORG = '11'
	group by CONTNAT.CORG, CONTNAT.CCONTFRS
) ENG_CONTRAT
on ENG_CONTRAT.CORG = TF.CORG and ENG_CONTRAT.CCONTFRS = TF.REF_BT_CTR_GO
where TF.TYPBON = 'Contrat'

update #TRAIT_FACTURES
	set MT_ENG = ENG_BT.MT_ENG
from #TRAIT_FACTURES TF
left join 
(
	select distinct ECRIB.CORG
			, ECRIB.NOBON
			, MTHT MT_ENG
	from MASTER_ESTIA..ESTIA_ECRIB ECRIB
	where ECRIB.CORG = '11'
	and ECRIB.TYPBON = 'BT'
	and ECRIB.CTRAIT = 'LBT'
) ENG_BT
on ENG_BT.CORG = TF.CORG and ENG_BT.NOBON = TF.REF_BT_CTR_GO
where TF.TYPBON = 'BT'

update #TRAIT_FACTURES
	set MT_ENG = ENG_OPERATION.MT_ENG
from #TRAIT_FACTURES TF
left join
(
	select CORG
			, COPE
			, CTRANCHE
			, CDEPR
			, SUM(HTBASE) MT_ENG
	from MASTER_ESTIA..ESTIA_PABASIT PABASIT
	where CORG = '11'
	group by CORG, COPE, CTRANCHE, CDEPR
) ENG_OPERATION
on ENG_OPERATION.CORG = TF.CORG and ENG_OPERATION.COPE = TF.REF_BT_CTR_GO and ENG_OPERATION.CTRANCHE = TF.CTRANCHE and ENG_OPERATION.CDEPR = TF.CDEPR
where TF.TYPBON = 'Operation'


--DELETE FROM WRK_INTERFACE_EASYFOLDER_FACTURES WHERE PK_TEMPS = @DT AND IFC_STATUT_TRAITEMENT IS NOT NULL;
DELETE FROM WRK_INTERFACE_EASYFOLDER_FACTURES_TEST WHERE PK_TEMPS = @DT AND IFC_STATUT_TRAITEMENT IS NOT NULL;

-- AJOUT DES MAJ DE FACTURES DANS LA TABLE WRK_INTERFACE_EASYFOLDER_FACTURES
--INSERT INTO WRK_INTERFACE_EASYFOLDER_FACTURES(PK_TEMPS, ACTION, CLE, NOPRE, MTHT, MTTTC, MTTVA, DATFAC, REF_BT_CTR_GO, RESP_IMMB, GEST_IMMB, TECH_IMMB, TECH_GO, CGROUPE, LGROUPE, TYPBON, LTIERS, CTIERS, CRIT_ENG, SCRIT_ENG, MT_ENG, NOPIECE)
INSERT INTO WRK_INTERFACE_EASYFOLDER_FACTURES_TEST(PK_TEMPS, ACTION, CLE, NOPRE, MTHT, MTTTC, MTTVA, DATFAC, REF_BT_CTR_GO, RESP_IMMB, GEST_IMMB, TECH_IMMB, TECH_GO, CGROUPE, LGROUPE, TYPBON, LTIERS, CTIERS, CRIT_ENG, SCRIT_ENG, MT_ENG, NOPIECE)
SELECT @DT PK_TEMPS
	 , 'UPDATE' ACTION
	 , TRAIT_FACTURES.CLE
	 , TRAIT_FACTURES.NOPRE
	 , TRAIT_FACTURES.MTHT
	 , TRAIT_FACTURES.MTTTC
	 , TRAIT_FACTURES.MTTVA
	 , TRAIT_FACTURES.DATFAC
	 , TRAIT_FACTURES.REF_BT_CTR_GO
	 , TRAIT_FACTURES.RESP_IMMB
	 , TRAIT_FACTURES.GEST_IMMB
	 , TRAIT_FACTURES.TECH_IMMB
	 , TRAIT_FACTURES.TECH_GO
	 , TRAIT_FACTURES.CGROUPE
	 , TRAIT_FACTURES.LGROUPE
	 , TRAIT_FACTURES.TYPBON
	 , TRAIT_FACTURES.LTIERS
	 , TRAIT_FACTURES.CTIERS
	 , TRAIT_FACTURES.CRIT_ENG
	 , TRAIT_FACTURES.SCRIT_ENG
	 , TRAIT_FACTURES.MT_ENG
	 , TRAIT_FACTURES.NOPIECE
FROM #TRAIT_FACTURES TRAIT_FACTURES
INNER JOIN L_INTERFACE_EASYFOLDER_FACTURES EASYFOLDER_FACTURES
ON EASYFOLDER_FACTURES.CLE = TRAIT_FACTURES.CLE AND EASYFOLDER_FACTURES.DATFAC = TRAIT_FACTURES.DATFAC
WHERE ISNULL(TRAIT_FACTURES.NOPRE, '') <> ISNULL(EASYFOLDER_FACTURES.NOPRE, '')
OR ISNULL(TRAIT_FACTURES.MTHT, 0) <> ISNULL(EASYFOLDER_FACTURES.MTHT, 0)
OR ISNULL(TRAIT_FACTURES.MTTTC, 0) <> ISNULL(EASYFOLDER_FACTURES.MTTTC, 0)
OR ISNULL(TRAIT_FACTURES.MTTVA, 0) <> ISNULL(EASYFOLDER_FACTURES.MTTVA, 0)
OR ISNULL(TRAIT_FACTURES.DATFAC, '') <> ISNULL(EASYFOLDER_FACTURES.DATFAC, '')
OR ISNULL(TRAIT_FACTURES.REF_BT_CTR_GO, '') <> ISNULL(EASYFOLDER_FACTURES.REF_BT_CTR_GO, '')
OR ISNULL(TRAIT_FACTURES.RESP_IMMB, '') <> ISNULL(EASYFOLDER_FACTURES.RESP_IMMB, '')
OR ISNULL(TRAIT_FACTURES.GEST_IMMB, '') <> ISNULL(EASYFOLDER_FACTURES.GEST_IMMB, '')
OR ISNULL(TRAIT_FACTURES.TECH_IMMB, '') <> ISNULL(EASYFOLDER_FACTURES.TECH_IMMB, '')
OR ISNULL(TRAIT_FACTURES.TECH_GO, '') <> ISNULL(EASYFOLDER_FACTURES.TECH_GO, '')
OR ISNULL(TRAIT_FACTURES.CGROUPE, '') <> ISNULL(EASYFOLDER_FACTURES.CGROUPE,'')
OR ISNULL(TRAIT_FACTURES.LGROUPE, '') <> ISNULL(EASYFOLDER_FACTURES.LGROUPE, '')
OR ISNULL(TRAIT_FACTURES.TYPBON, '') <> ISNULL(EASYFOLDER_FACTURES.TYPBON, '')
OR ISNULL(TRAIT_FACTURES.LTIERS, '') <> ISNULL(EASYFOLDER_FACTURES.LTIERS, '')
OR ISNULL(TRAIT_FACTURES.CTIERS, '') <> ISNULL(EASYFOLDER_FACTURES.CTIERS, '')
OR ISNULL(TRAIT_FACTURES.CRIT_ENG, '') <> ISNULL(EASYFOLDER_FACTURES.CRIT_ENG, '')
OR ISNULL(TRAIT_FACTURES.SCRIT_ENG, '') <> ISNULL(EASYFOLDER_FACTURES.SCRIT_ENG, '')
OR ISNULL(TRAIT_FACTURES.MT_ENG, 0) <> ISNULL(EASYFOLDER_FACTURES.MT_ENG, 0)
OR ISNULL(TRAIT_FACTURES.NOPIECE, '') <> ISNULL(EASYFOLDER_FACTURES.NOPIECE, '')


---- MAJ DES FACTURES DANS LA TABLE L_INTERFACE_EASYFOLDER_FACTURES
--MERGE INTO L_INTERFACE_EASYFOLDER_FACTURES L
--USING
--(
--	SELECT CLE
--		 , NOPRE
--		 , MTHT
--		 , MTTTC
--		 , MTTVA
--		 , DATFAC
--		 , REF_BT_CTR_GO
--		 , RESP_IMMB
--		 , GEST_IMMB
--		 , TECH_IMMB
--		 , TECH_GO
--		 , CGROUPE
--		 , LGROUPE
--		 , TYPBON
--		 , LTIERS
--		 , CTIERS
--		 , CRIT_ENG
--		 , SCRIT_ENG
--		 , MT_ENG
--		 , NOPIECE  
--	--FROM WRK_INTERFACE_EASYFOLDER_FACTURES
--	FROM WRK_INTERFACE_EASYFOLDER_FACTURES_TEST
--	WHERE PK_TEMPS = @DT
--	AND ACTION = 'UPDATE'
--) SRC
--ON (SRC.CLE = L.CLE AND SRC.DATFAC = L.DATFAC)
--WHEN MATCHED THEN UPDATE SET MTHT = SRC.MTHT,
--							 MTTTC = SRC.MTTTC,
--							 MTTVA = SRC.MTTVA,
--							 DATFAC = SRC.DATFAC,
--							 REF_BT_CTR_GO = SRC.REF_BT_CTR_GO,
--							 RESP_IMMB = SRC.RESP_IMMB,
--							 GEST_IMMB = SRC.GEST_IMMB,
--							 TECH_IMMB = SRC.TECH_IMMB,
--							 TECH_GO = SRC.TECH_GO,
--							 CGROUPE = SRC.CGROUPE,
--							 LGROUPE = SRC.LGROUPE,
--							 TYPBON = SRC.TYPBON,
--							 LTIERS = SRC.LTIERS,
--							 CTIERS = SRC.CTIERS,
--							 CRIT_ENG = SRC.CRIT_ENG,
--							 SCRIT_ENG = SRC.SCRIT_ENG,
--							 MT_ENG = SRC.MT_ENG,
--							 NOPIECE = SRC.NOPIECE;

-- AJOUT DES NOUVELLES FACTURES DANS LA TABLE WRK_INTERFACE_EASYFOLDER_FACTURES
--INSERT INTO WRK_INTERFACE_EASYFOLDER_FACTURES(PK_TEMPS, ACTION, CLE, NOPRE, MTHT, MTTTC, MTTVA, DATFAC, REF_BT_CTR_GO, RESP_IMMB, GEST_IMMB, TECH_IMMB, TECH_GO, CGROUPE, LGROUPE, TYPBON, LTIERS, CTIERS, CRIT_ENG, SCRIT_ENG, MT_ENG, NOPIECE)
INSERT INTO WRK_INTERFACE_EASYFOLDER_FACTURES_TEST(PK_TEMPS, ACTION, CLE, NOPRE, MTHT, MTTTC, MTTVA, DATFAC, REF_BT_CTR_GO, RESP_IMMB, GEST_IMMB, TECH_IMMB, TECH_GO, CGROUPE, LGROUPE, TYPBON, LTIERS, CTIERS, CRIT_ENG, SCRIT_ENG, MT_ENG, NOPIECE)
SELECT @DT PK_TEMPS
	 --, 'ADD' ACTION
	 , 'UPDATE' ACTION
	 , TRAIT_FACTURES.CLE
	 , TRAIT_FACTURES.NOPRE
	 , TRAIT_FACTURES.MTHT
	 , TRAIT_FACTURES.MTTTC
	 , TRAIT_FACTURES.MTTVA
	 , TRAIT_FACTURES.DATFAC
	 , TRAIT_FACTURES.REF_BT_CTR_GO
	 , TRAIT_FACTURES.RESP_IMMB
	 , TRAIT_FACTURES.GEST_IMMB
	 , TRAIT_FACTURES.TECH_IMMB
	 , TRAIT_FACTURES.TECH_GO
	 , TRAIT_FACTURES.CGROUPE
	 , TRAIT_FACTURES.LGROUPE
	 , TRAIT_FACTURES.TYPBON
	 , TRAIT_FACTURES.LTIERS
	 , TRAIT_FACTURES.CTIERS
	 , TRAIT_FACTURES.CRIT_ENG
	 , TRAIT_FACTURES.SCRIT_ENG
	 , TRAIT_FACTURES.MT_ENG
	 , TRAIT_FACTURES.NOPIECE
FROM #TRAIT_FACTURES TRAIT_FACTURES
WHERE NOT EXISTS
(
	SELECT * FROM L_INTERFACE_EASYFOLDER_FACTURES L
	WHERE L.CLE = TRAIT_FACTURES.CLE AND L.DATFAC = TRAIT_FACTURES.DATFAC
)

---- AJOUT DES NOUVELLES FACTURES DANS LA TABLE L_INTERFACE_EASYFOLDER_FACTURES
--INSERT INTO L_INTERFACE_EASYFOLDER_FACTURES(CLE, NOPRE, MTHT, MTTTC, MTTVA, DATFAC, REF_BT_CTR_GO, RESP_IMMB, GEST_IMMB, TECH_IMMB, TECH_GO, CGROUPE, LGROUPE, TYPBON, LTIERS, CTIERS, CRIT_ENG, SCRIT_ENG, MT_ENG, NOPIECE)
--SELECT CLE
--	 , NOPRE
--	 , MTHT
--	 , MTTTC
--	 , MTTVA
--	 , DATFAC
--	 , REF_BT_CTR_GO
--	 , RESP_IMMB
--	 , GEST_IMMB
--	 , TECH_IMMB
--	 , TECH_GO
--	 , CGROUPE
--	 , LGROUPE
--	 , TYPBON
--	 , LTIERS
--	 , CTIERS
--	 , CRIT_ENG
--	 , SCRIT_ENG
--	 , MT_ENG
--	 , NOPIECE  
----FROM WRK_INTERFACE_EASYFOLDER_FACTURES
--FROM WRK_INTERFACE_EASYFOLDER_FACTURES_TEST
--WHERE PK_TEMPS = @DT
--AND ACTION = 'ADD'

-- MAJ DES FACTURES DANS LA TABLE L_INTERFACE_EASYFOLDER_FACTURES
MERGE INTO L_INTERFACE_EASYFOLDER_FACTURES L
USING
(
	SELECT CLE
		 , NOPRE
		 , MTHT
		 , MTTTC
		 , MTTVA
		 , DATFAC
		 , REF_BT_CTR_GO
		 , RESP_IMMB
		 , GEST_IMMB
		 , TECH_IMMB
		 , TECH_GO
		 , CGROUPE
		 , LGROUPE
		 , TYPBON
		 , LTIERS
		 , CTIERS
		 , CRIT_ENG
		 , SCRIT_ENG
		 , MT_ENG
		 , NOPIECE  
	--FROM WRK_INTERFACE_EASYFOLDER_FACTURES
	FROM WRK_INTERFACE_EASYFOLDER_FACTURES_TEST
	WHERE PK_TEMPS = @DT
	AND ACTION = 'UPDATE'
) SRC
ON (SRC.CLE = L.CLE AND SRC.DATFAC = L.DATFAC)
WHEN MATCHED THEN UPDATE SET MTHT = SRC.MTHT,
							 MTTTC = SRC.MTTTC,
							 MTTVA = SRC.MTTVA,
							 DATFAC = SRC.DATFAC,
							 REF_BT_CTR_GO = SRC.REF_BT_CTR_GO,
							 RESP_IMMB = SRC.RESP_IMMB,
							 GEST_IMMB = SRC.GEST_IMMB,
							 TECH_IMMB = SRC.TECH_IMMB,
							 TECH_GO = SRC.TECH_GO,
							 CGROUPE = SRC.CGROUPE,
							 LGROUPE = SRC.LGROUPE,
							 TYPBON = SRC.TYPBON,
							 LTIERS = SRC.LTIERS,
							 CTIERS = SRC.CTIERS,
							 CRIT_ENG = SRC.CRIT_ENG,
							 SCRIT_ENG = SRC.SCRIT_ENG,
							 MT_ENG = SRC.MT_ENG,
							 NOPIECE = SRC.NOPIECE
WHEN NOT MATCHED THEN
INSERT (CLE, NOPRE, MTHT, MTTTC, MTTVA, DATFAC, REF_BT_CTR_GO, RESP_IMMB, GEST_IMMB, TECH_IMMB, TECH_GO, CGROUPE, LGROUPE, TYPBON, LTIERS, CTIERS, CRIT_ENG, SCRIT_ENG, MT_ENG, NOPIECE)
VALUES (SRC.CLE, SRC.NOPRE, SRC.MTHT, SRC.MTTTC, SRC.MTTVA, SRC.DATFAC, SRC.REF_BT_CTR_GO, SRC.RESP_IMMB, SRC.GEST_IMMB, SRC.TECH_IMMB, SRC.TECH_GO, SRC.CGROUPE, SRC.LGROUPE, SRC.TYPBON, SRC.LTIERS, SRC.CTIERS, SRC.CRIT_ENG, SRC.SCRIT_ENG, SRC.MT_ENG, SRC.NOPIECE);

END