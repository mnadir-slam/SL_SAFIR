CREATE PROCEDURE [dbo].[FILL_ETAT_LOCATIF] 
(
	@DT DATETIME,
	@DEL_JUST_DAY  VARCHAR(1)
)
AS
BEGIN


SET ANSI_WARNINGS OFF

BEGIN TRAN

--#######################################################################################################################
--####################################### CALCUL DES SURFACES AU NIVEAU DES LOTS ########################################
--#######################################################################################################################

--TABLE TEMPORAIRE DES SURFACES AU NIVEAU DES LOTS
CREATE TABLE #SURF
(
	PK_LOCAL  INT NOT NULL,
	SURF_HAB  NUMERIC(17,2) NULL,
	SURF_COR  NUMERIC(17,2) NULL
)


INSERT INTO #SURF (PK_LOCAL, SURF_HAB, SURF_COR)
SELECT PK_LOCAL,
       SUM(CASE WHEN CSTE = 'HAB' THEN SURFACE ELSE 0 END) AS SURF_HAB,
       SUM(CASE WHEN CSTE = 'COR' THEN SURFACE ELSE 0 END) AS SURF_COR
FROM (SELECT LOCAL.PK_LOCAL, SURFLOC.CSTE,
             CASE WHEN SURFLOC.CSTE = 'HAB' THEN (CASE WHEN SURFLOC.SHAB = 0 THEN SURFLOC.SREELLE ELSE SURFLOC.SHAB END) ELSE (CASE WHEN SURFLOC.SCORR = 0 THEN SURFLOC.SREELLE ELSE SURFLOC.SCORR END) END AS SURFACE,
             RANK() OVER (PARTITION BY LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL, SURFLOC.CSTE
                          ORDER BY LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL, SURFLOC.CSTE,
                                   CASE WHEN @DT >= SURFLOC.DEFFET THEN SURFLOC.DEFFET ELSE '1900/01/01' END DESC,
                                   CASE WHEN @DT <  SURFLOC.DEFFET THEN SURFLOC.DEFFET ELSE '2999/01/01' END ASC,
                                   SURFLOC.PK_SURFLOC) AS RK
      FROM ESTIA_LOCAL AS LOCAL
           LEFT JOIN ESTIA_SURFLOC AS SURFLOC
                ON SURFLOC.CORG = LOCAL.CORG
                AND SURFLOC.CAGENCE = LOCAL.CAGENCE
                AND SURFLOC.CGROUPE = LOCAL.CGROUPE
                AND SURFLOC.CIMMEUB = LOCAL.CIMMEUB
                AND SURFLOC.CLOCAL = LOCAL.CLOCAL
                AND SURFLOC.CSTE IN ('HAB', 'COR')) AS TMP
WHERE RK = 1
GROUP BY PK_LOCAL


--#######################################################################################################################
--####################################### CALCUL DES SURFACES AU NIVEAU DES BAUX ########################################
--#######################################################################################################################

--TABLE TEMPORAIRE DES SURFACES POUR CHAQUE REGROUPEMENT AU NIVEAU DE CHAQUE BAIL
CREATE TABLE #TMP_TYPE
(
	PK_BAIL					  INT NOT NULL,
	CD_COR_TYPE_LOT_RUBRIQUE  VARCHAR(3) NOT NULL,
	SURF_HAB                  NUMERIC(13,2) NULL,
	SURF_COR                  NUMERIC(13,2) NULL,
	NB_LOTS                   INT NULL
)

INSERT INTO #TMP_TYPE (PK_BAIL, CD_COR_TYPE_LOT_RUBRIQUE, SURF_HAB, SURF_COR, NB_LOTS)
SELECT FK_BAIL AS PK_BAIL, ISNULL(P.CD_COR_TYPE_LOT_RUBRIQUE,'$$$') AS CD_COR_TYPE_LOT_RUBRIQUE,
       SUM(S.SURF_HAB) AS SURF_HAB, SUM(S.SURF_COR) AS SURF_COR, COUNT(*) AS NB_LOTS
FROM WRK_HISTO_LOT AS W
     LEFT JOIN #SURF AS S
          ON S.PK_LOCAL = W.FK_LOCAL
     LEFT JOIN P_TYPE_LOT AS P
           ON P.CD_TYPE_LOT = W.CTYPLOG
WHERE @DT BETWEEN W.DT_DEBUT_RAT AND ISNULL(W.DT_FIN_RAT, '2999/01/01')
AND W.CD_STATUT = 'L'
AND W.FK_BAIL IS NOT NULL
GROUP BY FK_BAIL, P.CD_COR_TYPE_LOT_RUBRIQUE

PRINT 'TABLE TEMPORAIRE DES SURFACES POUR CHAQUE REGROUPEMENT AU NIVEAU DE CHAQUE BAIL'



CREATE TABLE #SURF_BAIL
(
	PK_BAIL   INT NOT NULL,
	SURF_HAB  NUMERIC(17,2) NULL,
	SURF_COR  NUMERIC(17,2) NULL,
	NB_LOTS   INT NULL
)

INSERT INTO #SURF_BAIL (PK_BAIL, SURF_HAB, SURF_COR, NB_LOTS)
SELECT PK_BAIL, SUM(SURF_HAB) AS SURF_HAB, SUM(SURF_COR) AS SURF_COR, SUM(NB_LOTS) AS NB_LOTS
FROM #TMP_TYPE
GROUP BY PK_BAIL



--#######################################################################################################################
--############################### CALCUL DES ELEMENT PERMANENT AU NIVEAU DES TYPE DE LOT ################################
--#######################################################################################################################


--TABLE TEMPORAIRE DES MONTANTS (ELEMENTS DE FACTURATIONS) POUR CHAQUE REGROUPEMENT AU NIVEAU DE CHAQUE BAIL
CREATE TABLE #TMP_RUB
(
	PK_BAIL						INT NOT NULL,
	CD_COR_TYPE_LOT_RUBRIQUE	VARCHAR(3) NOT NULL,
	NB_MOIS_FRQ					INT,
	MT_LOYER_FACIAL				NUMERIC(13,2) NULL,
	MT_LOYER_ACTUEL				NUMERIC(13,2) NULL,
	MT_LOYER_ACTUEL_FACTURABLE	NUMERIC(13,2) NULL,
	MT_CHARGES					NUMERIC(13,2) NULL,
	MT_DG						NUMERIC(13,2) NULL,
	MT_LOYER_FRANCHISE			NUMERIC(12,2) NULL,
	MT_PALIER					NUMERIC(12,2) NULL
)

INSERT INTO #TMP_RUB (PK_BAIL, CD_COR_TYPE_LOT_RUBRIQUE, NB_MOIS_FRQ, MT_LOYER_FACIAL, MT_LOYER_ACTUEL, MT_LOYER_ACTUEL_FACTURABLE, MT_CHARGES, MT_DG, MT_LOYER_FRANCHISE, MT_PALIER)
SELECT LOCATION.FK_BAIL AS PK_BAIL,
       ISNULL(T.CD_COR_TYPE_LOT_RUBRIQUE,'$$$') AS CD_COR_TYPE_LOT_RUBRIQUE,
       LOCATION.PERIOD AS NB_MOIS_FRQ,
       SUM(CASE WHEN PSRE.IND_CALCUL_LOYER = 'O' AND PSRE.IND_LOYER_FACIAL = 'O' THEN HQLOCAT.NB ELSE 0 END) AS MT_LOYER_FACIAL,
       SUM(CASE WHEN PSRE.IND_CALCUL_LOYER = 'O' AND PSRE.IND_CALCUL_FRANCHISE = 'N' AND PSRE.IND_CALCUL_PALIER = 'N' THEN HQLOCAT.NB ELSE 0 END) AS MT_LOYER_ACTUEL,
       SUM(CASE WHEN PSRE.IND_CALCUL_LOYER = 'O' AND PSRE.IND_CALCUL_FRANCHISE = 'N' AND PSRE.IND_CALCUL_PALIER = 'N' AND PSRE.CD_SOUS_REG_ELTFAC <> 'LOR' THEN HQLOCAT.NB ELSE 0 END) AS MT_LOYER_ACTUEL_FACTURABLE,
       SUM(CASE WHEN PSRE.IND_CALCUL_CHARGES = 'O' THEN HQLOCAT.NB ELSE 0 END) AS MT_CHARGES,
       CONVERT(NUMERIC(13,2), 0) AS MT_DG,
	   --SUM(CASE WHEN PSRE.IND_CALCUL_DG = 'O' THEN HQLOCAT.NB ELSE 0 END) AS MT_DG,
	   SUM(CASE WHEN PSRE.IND_CALCUL_FRANCHISE = 'O' THEN HQLOCAT.NB ELSE 0 END) AS MT_LOYER_FRANCHISE,
	   SUM(CASE WHEN PSRE.IND_CALCUL_PALIER = 'O' THEN HQLOCAT.NB ELSE 0 END) AS MT_PALIER

FROM ESTIA_LOCATION AS LOCATION
     INNER JOIN ESTIA_HQLOCAT AS HQLOCAT
           ON HQLOCAT.CORG = LOCATION.CORG
           AND HQLOCAT.CAGENCE = LOCATION.CAGENCE
           AND HQLOCAT.CGROUPE = LOCATION.CGROUPE
           AND HQLOCAT.CIMMEUB = LOCATION.CIMMEUB
           AND HQLOCAT.CLOCAL = LOCATION.CLOCAL
           AND HQLOCAT.OCC = LOCATION.OCC
     INNER JOIN P_RUBRIQUE AS P
           ON P.CD_RUBRIQUE = HQLOCAT.CRUB
     INNER JOIN P_SOUS_REG_ELTFAC AS PSRE
           ON PSRE.CD_SOUS_REG_ELTFAC = P.CD_SOUS_REG_ELTFAC

     LEFT JOIN #TMP_TYPE AS T
          ON T.PK_BAIL = HQLOCAT.FK_BAIL
          AND T.CD_COR_TYPE_LOT_RUBRIQUE = P.CD_COR_TYPE_LOT_RUBRIQUE

WHERE @DT BETWEEN HQLOCAT.DDEB AND ISNULL(HQLOCAT.DFIN, '2999/01/01')
AND LOCATION.FK_BAIL IS NOT NULL
AND (LOCATION.DATSORQUIT IS NULL OR LOCATION.DATSORQUIT > @DT)
GROUP BY LOCATION.FK_BAIL, T.CD_COR_TYPE_LOT_RUBRIQUE, LOCATION.PERIOD

/*MERGE INTO #TMP_RUB
USING
(
	SELECT LOCATION.FK_BAIL, 
	SUM(CASE WHEN PSRE.IND_CALCUL_DG = 'O' THEN HQLOCAT.NB ELSE 0 END) AS MT_DG
	FROM ESTIA_LOCATION AS LOCATION
     INNER JOIN ESTIA_HQLOCAT AS HQLOCAT
           ON HQLOCAT.CORG = LOCATION.CORG
           AND HQLOCAT.CAGENCE = LOCATION.CAGENCE
           AND HQLOCAT.CGROUPE = LOCATION.CGROUPE
           AND HQLOCAT.CIMMEUB = LOCATION.CIMMEUB
           AND HQLOCAT.CLOCAL = LOCATION.CLOCAL
           AND HQLOCAT.OCC = LOCATION.OCC
     INNER JOIN P_RUBRIQUE AS P
           ON P.CD_RUBRIQUE = HQLOCAT.CRUB
     INNER JOIN P_SOUS_REG_ELTFAC AS PSRE
           ON PSRE.CD_SOUS_REG_ELTFAC = P.CD_SOUS_REG_ELTFAC
	WHERE HQLOCAT.DDEB BETWEEN LOCATION.DATEFFET AND DATEADD(MONTH, 1, LOCATION.DATEFFET) 
	AND LOCATION.FK_BAIL IS NOT NULL
	GROUP BY LOCATION.FK_BAIL
) SRC
ON (SRC.FK_BAIL = #TMP_RUB.PK_BAIL)
WHEN MATCHED THEN UPDATE SET MT_DG = SRC.MT_DG;*/

PRINT 'TABLE TEMPORAIRE DES MONTANTS (ELEMENTS DE FACTURATIONS) POUR CHAQUE REGROUPEMENT AU NIVEAU DE CHAQUE BAIL'




--#######################################################################################################################


--TABLE TEMPORAIRE AVEC LES SURFACES ET MONTANTS POUR CHAQUE REGROUPEMENT AU NIVEAU DE CHAQUE BAIL
CREATE TABLE #TMP_RUB_TYPE
(
	PK_BAIL						INT NOT NULL,
	CD_COR_TYPE_LOT_RUBRIQUE	VARCHAR(3) NOT NULL,
	SURF_HAB					NUMERIC(13,2) NULL,
	SURF_COR					NUMERIC(13,2) NULL,
	NB_LOTS						INT NULL,
	MT_LOYER_FACIAL				NUMERIC(13,2) NULL,
	MT_LOYER_ACTUEL				NUMERIC(13,2) NULL,
	MT_LOYER_ACTUEL_FACTURABLE	NUMERIC(13,2) NULL,
	MT_CHARGES					NUMERIC(13,2) NULL,
	MT_DG						NUMERIC(12,2) NULL,
	MT_LOYER_FRANCHISE			NUMERIC(12,2) NULL,
	MT_PALIER					NUMERIC(12,2) NULL,
	CONSTRAINT PK_TMP_RUB_TYPE PRIMARY KEY CLUSTERED 
	(
		PK_BAIL ASC,
		CD_COR_TYPE_LOT_RUBRIQUE ASC
    )
)

INSERT INTO #TMP_RUB_TYPE (PK_BAIL, CD_COR_TYPE_LOT_RUBRIQUE, SURF_HAB, SURF_COR, NB_LOTS, MT_LOYER_FACIAL, MT_LOYER_ACTUEL, MT_LOYER_ACTUEL_FACTURABLE, MT_CHARGES, MT_DG, MT_LOYER_FRANCHISE, MT_PALIER)
SELECT ISNULL(PT.PK_BAIL, PR.PK_BAIL) AS PK_BAIL,
       ISNULL(PT.CD_COR_TYPE_LOT_RUBRIQUE, PR.CD_COR_TYPE_LOT_RUBRIQUE) AS CD_COR_TYPE_LOT_RUBRIQUE,
       ISNULL(PT.SURF_HAB, 0) AS SURF_HAB,
       ISNULL(PT.SURF_COR, 0) AS SURF_COR,
       ISNULL(PT.NB_LOTS, 1) AS NB_LOTS,
       ISNULL(PR.MT_LOYER_FACIAL, 0) AS MT_LOYER_FACIAL,
       ISNULL(PR.MT_LOYER_ACTUEL, 0) AS MT_LOYER_ACTUEL,
	   ISNULL(PR.MT_LOYER_ACTUEL_FACTURABLE, 0) AS MT_LOYER_ACTUEL_FACTURABLE,
       ISNULL(PR.MT_CHARGES, 0) AS MT_CHARGES,
       ISNULL(PR.MT_DG, 0) AS MT_DG,
	   ISNULL(PR.MT_LOYER_FRANCHISE, 0) AS MT_LOYER_FRANCHISE,
	   ISNULL(PR.MT_PALIER, 0) AS MT_PALIER
FROM #TMP_RUB AS PR
     FULL OUTER JOIN #TMP_TYPE AS PT
           ON PT.PK_BAIL = PR.PK_BAIL
           AND PT.CD_COR_TYPE_LOT_RUBRIQUE = PR.CD_COR_TYPE_LOT_RUBRIQUE


DROP TABLE #TMP_RUB

PRINT 'TABLE TEMPORAIRE AVEC LES SURFACES ET MONTANTS POUR CHAQUE REGROUPEMENT AU NIVEAU DE CHAQUE BAIL'


--#######################################################################################################################
--############################################ CALCUL DU DEPOT DE GARANTIE ##############################################
--#######################################################################################################################

CREATE TABLE #DG
(
	PK_BAIL          INT NULL,
	CCOMPTE          VARCHAR(22) NOT NULL,
	NOBAIL           INT NOT NULL,
	MT_DG            NUMERIC(13,2) NULL
)

INSERT INTO #DG (PK_BAIL, CCOMPTE, NOBAIL, MT_DG)
(
	SELECT PK_BAIL, CCOMPTE, NOBAIL, SUM(MT_DG) AS MT_DG
	FROM
	(
		SELECT CPTGLOB.FK_BAIL AS PK_BAIL, CPTGLOB.CCOMPTE, CPTGLOB.NOBAIL,
			   SUM(CASE WHEN CPTGLOB.SENS = 'C' THEN CAST(REPLACE(CPTGLOB.MONTANT, ',','.') AS NUMERIC(18,2)) ELSE CAST(REPLACE(CPTGLOB.MONTANT, ',','.') AS NUMERIC(18,2))*-1 END) AS MT_DG
		FROM ESTIA_CPTGLOB AS CPTGLOB
			 INNER JOIN P_RUBRIQUE AS PR
				   ON PR.CD_RUBRIQUE = CPTGLOB.CRUB
			 INNER JOIN ESTIA_LOCATION LOCATION
			 ON LOCATION.PK_LOCATION = CPTGLOB.FK_BAIL
		WHERE CPTGLOB.TYPCPTA = 'LD'
		AND (PR.IND_DG_PRINCIPAL = 'O' OR PR.IND_DG_ANNEXE = 'O')
		AND CPTGLOB.DATEC <= @DT
		AND LOCATION.CORG = '11'
		GROUP BY CPTGLOB.FK_BAIL, CPTGLOB.CCOMPTE, CPTGLOB.NOBAIL
		-- Debut modif MNA 080917
		UNION
		SELECT CPTGLOB.FK_BAIL AS PK_BAIL, CPTGLOB.CCOMPTE, CPTGLOB.NOBAIL,
			   SUM(CASE WHEN CPTGLOB.SENS = 'C' THEN CAST(REPLACE(CPTGLOB.MONTANT, ',','.') AS NUMERIC(18,2)) ELSE CAST(REPLACE(CPTGLOB.MONTANT, ',','.') AS NUMERIC(18,2))*-1 END) AS MT_DG
		FROM ESTIA_CPTGLOB AS CPTGLOB
			 INNER JOIN ESTIA_LOCATION LOCATION
			 ON LOCATION.PK_LOCATION = CPTGLOB.FK_BAIL
		WHERE CPTGLOB.TYPCPTA = 'LD'
		AND CPTGLOB.DATEC <= @DT
		AND LOCATION.CORG = '11'
		AND UPPER(CJOURNAL) = 'ANO'
		AND FK_RUB IS NULL
		AND UPPER(LIB) LIKE '%REPRISE DG%'
		--AND CPTGLOB.CCOMPTE = '00000004723'
		GROUP BY CPTGLOB.FK_BAIL, CPTGLOB.CCOMPTE, CPTGLOB.NOBAIL
		-- FIn modif MNA 080917
		UNION
		SELECT CPTGLOB.FK_BAIL AS PK_BAIL, CPTGLOB.CCOMPTE, CPTGLOB.NOBAIL,
			   SUM(CASE WHEN CPTGLOB.SENS = 'C' THEN CAST(REPLACE(CPTGLOB.MONTANT, ',','.') AS NUMERIC(18,2)) ELSE CAST(REPLACE(CPTGLOB.MONTANT, ',','.') AS NUMERIC(18,2))*-1 END) AS MT_DG
		FROM ESTIA_CPTGLOB AS CPTGLOB
			 INNER JOIN ESTIA_LOCATION LOCATION
			 ON LOCATION.PK_LOCATION = CPTGLOB.FK_BAIL
		WHERE CPTGLOB.TYPCPTA = 'LD'
		AND CPTGLOB.DATEC <= @DT
		AND LOCATION.CORG = '11'
		AND UPPER(CJOURNAL) IN ('QUI')
		and CPTGLOB.CTYPECRI = 'ANV'
		AND FK_RUB IS NULL
		AND UPPER(LIB) LIKE '%REPRISE DG%' 
		GROUP BY CPTGLOB.FK_BAIL, CPTGLOB.CCOMPTE, CPTGLOB.NOBAIL
	) REQ
	GROUP BY PK_BAIL, CCOMPTE, NOBAIL
)

--#######################################################################################################################
--###################################################### REVISION #######################################################
--#######################################################################################################################

--REVISION PAR RUBRIQUE
CREATE TABLE #HRV_RUB
(
	PK                      INT IDENTITY(1,1) NOT NULL,
	PK_BAIL                 INT NOT NULL,
	CORG                    VARCHAR(2) NOT NULL,
	CAGENCE                 VARCHAR(4) NOT NULL,
	CGROUPE                 INT NOT NULL,
	CIMMEUB                 INT NOT NULL,
	CLOCAL                  INT NOT NULL,
	OCC                     INT NOT NULL,
	CRUB                    INT NOT NULL,
	CSTE                    VARCHAR(2) NOT NULL,
	IND_HREVIS              VARCHAR(1) NULL,
	CD_INDICE_REVISION      VARCHAR(10) NULL,--NOT NULL,
	DT_REVISION_PRECEDENTE  DATETIME NULL,
	DT_PROCHAINE_REVISION   DATETIME NULL,
	CD_PERIODICITE_REVISION INT NULL,
	MT_INITIAL              NUMERIC(18, 3) NULL,
	VAL_INDICE_INITIAL      NUMERIC(20, 5) NULL,
	VAL_INDICE_PRECEDENT    NUMERIC(20, 5) NULL,
	VAL_INDICE_ACTUEL       NUMERIC(20, 5) NULL,
	VAL_PROCHAIN_INDICE     NUMERIC(20, 5) NULL,
	CD_INDICE_INITIAL       INT NULL,
	CD_INDICE_ACTUEL        INT NULL,
	CD_PROCHAIN_INDICE      INT NULL,
	DT_INDICE_INITIAL       DATETIME NULL,
	DT_INDICE_ACTUEL        DATETIME NULL,
	DT_PROCHAIN_INDICE      DATETIME NULL,
	LB_INDICE_INITIAL       VARCHAR(20) NULL,
	LB_INDICE_ACTUEL        VARCHAR(20) NULL,
	LB_PROCHAIN_INDICE      VARCHAR(20) NULL
)


INSERT INTO #HRV_RUB (PK_BAIL, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, IND_HREVIS, CD_INDICE_REVISION, DT_REVISION_PRECEDENTE, CD_PERIODICITE_REVISION, MT_INITIAL, VAL_INDICE_INITIAL, VAL_INDICE_PRECEDENT, VAL_INDICE_ACTUEL, CD_INDICE_INITIAL, CD_INDICE_ACTUEL)
SELECT PK_BAIL, LOCATION.CORG, LOCATION.CAGENCE, LOCATION.CGROUPE, LOCATION.CIMMEUB, LOCATION.CLOCAL, LOCATION.OCC,
       CRUB, CSTE, 'O' AS IND_HREVIS,
       MAX(CASE WHEN RK_INV = 1 THEN TMP.CNUMI END) AS CD_INDICE_REVISION,
       MAX(CASE WHEN RK_INV = 1 THEN TMP.DREVIS END) AS DT_REVISION_PRECEDENTE,
       LOCATION.PEREVISION AS CD_PERIODICITE_REVISION,
       MIN(CASE WHEN RK = 1 THEN ANCNB END) AS MT_INITIAL,
       MIN(CASE WHEN RK = 1 THEN INDANC END) AS VAL_INDICE_INITIAL,
       MAX(CASE WHEN RK_INV = 1 THEN INDANC END) AS VAL_INDICE_PRECEDENT,
       MAX(CASE WHEN RK_INV = 1 THEN VALPOINT END) AS VAL_INDICE_ACTUEL,
       --MIN(CASE WHEN RK = 1 THEN TMP.TRIMIND END) AS CD_INDICE_INITIAL,
	   CASE WHEN (LOCATION.INDREF IS NULL OR LOCATION.INDREF = 0) THEN MIN(CASE WHEN RK = 1 THEN TMP.TRIMIND END) ELSE LOCATION.INDREF END AS CD_INDICE_INITIAL,
       MAX(CASE WHEN RK_INV = 1 THEN ANCTRIMIND END) AS CD_INDICE_ACTUEL
      
FROM (SELECT PK_HREVI, FK_BAIL AS PK_BAIL, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, CNUMI, DREVIS, NB, ANCNB, INDANC, VALPOINT, TRIMIND, ANCTRIMIND,
                     RANK() OVER (PARTITION BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE
                                               ORDER BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, DREVIS, DDEB, PK_HREVI) AS RK,
                     RANK() OVER (PARTITION BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE
                                               ORDER BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, DREVIS DESC, DDEB DESC, PK_HREVI DESC) AS RK_INV
      FROM ESTIA_HREVI
      WHERE CORG IS NOT NULL
      AND CAGENCE IS NOT NULL
      AND CGROUPE IS NOT NULL
      AND CIMMEUB IS NOT NULL
      AND CLOCAL IS NOT NULL
      AND OCC IS NOT NULL
      AND CSTE IS NOT NULL
      AND FK_BAIL IS NOT NULL
      AND DREVIS <= @DT
      AND DREVIS >= '1900-01-01') AS TMP

     INNER JOIN ESTIA_LOCATION AS LOCATION
           ON LOCATION.CORG = TMP.CORG
           AND LOCATION.CAGENCE = TMP.CAGENCE
           AND LOCATION.CGROUPE = TMP.CGROUPE
           AND LOCATION.CIMMEUB = TMP.CIMMEUB
           AND LOCATION.CLOCAL = TMP.CLOCAL
           AND LOCATION.OCC = TMP.OCC
WHERE (RK = 1 OR RK_INV = 1)

GROUP BY PK_BAIL, LOCATION.CORG, LOCATION.CAGENCE, LOCATION.CGROUPE, LOCATION.CIMMEUB, LOCATION.CLOCAL, LOCATION.OCC, CRUB, CSTE, LOCATION.PEREVISION, LOCATION.INDREF



--AJOUT DES RUBRIQUES REVISABLES N'AYANT PAS D'HISTORIQUE DE REVISION
INSERT INTO #HRV_RUB (PK_BAIL, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, IND_HREVIS, CD_INDICE_REVISION, DT_REVISION_PRECEDENTE, DT_PROCHAINE_REVISION, CD_PERIODICITE_REVISION, CD_INDICE_INITIAL, CD_INDICE_ACTUEL)
SELECT PK_BAIL, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, IND_HREVIS, CD_INDICE_REVISION, DT_REVISION_PRECEDENTE, DT_PROCHAINE_REVISION, CD_PERIODICITE_REVISION, CD_INDICE_INITIAL, CD_INDICE_ACTUEL
FROM (SELECT L.FK_BAIL AS PK_BAIL, L.CORG, L.CAGENCE, L.CGROUPE, L.CIMMEUB, L.CLOCAL, L.OCC, H.CRUB, H.CSTE, 'N' AS IND_HREVIS,
             L.CNUMI AS CD_INDICE_REVISION, L.DATEFFET AS DT_REVISION_PRECEDENTE, L.DREVISION AS DT_PROCHAINE_REVISION, L.PEREVISION AS CD_PERIODICITE_REVISION,
             L.INDREF AS CD_INDICE_INITIAL, L.INDPREC AS CD_INDICE_ACTUEL,
             RANK() OVER (PARTITION BY L.CORG, L.CAGENCE, L.CGROUPE, L.CIMMEUB, L.CLOCAL, L.OCC, H.CRUB, H.CSTE
                          ORDER BY L.CORG, L.CAGENCE, L.CGROUPE, L.CIMMEUB, L.CLOCAL, L.OCC, H.CRUB, H.CSTE, H.PK_HQLOCAT) AS RK
      FROM ESTIA_LOCATION AS L
           INNER JOIN ESTIA_HQLOCAT AS H
                ON H.CORG = L.CORG
                AND H.CAGENCE = L.CAGENCE
                AND H.CGROUPE = L.CGROUPE
                AND H.CIMMEUB = L.CIMMEUB
                AND H.CLOCAL = L.CLOCAL
                AND H.OCC = L.OCC
           LEFT JOIN #HRV_RUB AS W
                ON W.CORG = H.CORG
                AND W.CAGENCE = H.CAGENCE
                AND W.CGROUPE = H.CGROUPE
                AND W.CIMMEUB = H.CIMMEUB
                AND W.CLOCAL = H.CLOCAL
                AND W.OCC = H.OCC
                AND W.CSTE = H.CSTE
      WHERE W.CORG IS NULL
      AND H.LREVIS <> 0
      AND L.FK_BAIL IS NOT NULL
      AND H.DDEB <= @DT) AS TMP
WHERE RK = 1


--MISE A JOUR DES VALEURS DES INDICES
UPDATE #HRV_RUB
SET DT_INDICE_INITIAL = II.DT,
DT_INDICE_ACTUEL = IA.DT,
VAL_INDICE_INITIAL = CASE WHEN IND_HREVIS = 'N' THEN II.VAL ELSE VAL_INDICE_INITIAL END,
VAL_INDICE_ACTUEL = CASE WHEN IND_HREVIS = 'N' THEN IA.VAL ELSE VAL_INDICE_ACTUEL END,
LB_INDICE_INITIAL = II.LB,
LB_INDICE_ACTUEL = IA.LB,
DT_PROCHAIN_INDICE = DATEADD(month, CD_PERIODICITE_REVISION, IA.DT)
FROM #HRV_RUB AS W
     LEFT JOIN ESTIA_INDICE AS II
          ON II.CNUMI = W.CD_INDICE_REVISION
          AND II.MOIS * 10000 + II.ANNEE = W.CD_INDICE_INITIAL
     LEFT JOIN ESTIA_INDICE AS IA
          ON IA.CNUMI = W.CD_INDICE_REVISION
          AND IA.MOIS * 10000 + IA.ANNEE = W.CD_INDICE_ACTUEL

UPDATE #HRV_RUB
SET VAL_PROCHAIN_INDICE = I.VAL,
LB_PROCHAIN_INDICE = I.LB,
CD_PROCHAIN_INDICE = I.MOIS * 10000 + I.ANNEE
FROM #HRV_RUB AS W
     INNER JOIN ESTIA_INDICE AS I
           ON I.CNUMI = W.CD_INDICE_REVISION
           AND I.DT = W.DT_PROCHAIN_INDICE

PRINT 'TABLE TEMPORAIRE SUR LA REVISION AU NIVEAU DES RUBRIQUES DES BAUX'





--REVISION PAR BAIL
CREATE TABLE #HRV
(
	PK_BAIL                 INT NOT NULL,
	CD_INDICE_REVISION      VARCHAR(10) NULL,
	DT_REVISION_PRECEDENTE  DATETIME NULL,
	DT_PROCHAINE_REVISION   DATETIME NULL,
	CD_PERIODICITE_REVISION INT NULL,
	MT_INITIAL              NUMERIC(18, 3) NULL,
	VAL_INDICE_INITIAL      NUMERIC(20, 5) NULL,
	VAL_INDICE_ACTUEL       NUMERIC(20, 5) NULL,
	VAL_PROCHAIN_INDICE     NUMERIC(20, 5) NULL,
	CD_INDICE_INITIAL       INT NULL,
	CD_INDICE_ACTUEL        INT NULL,
	CD_PROCHAIN_INDICE      INT NULL,
	DT_INDICE_INITIAL       DATETIME NULL,
	DT_INDICE_ACTUEL        DATETIME NULL,
	DT_PROCHAIN_INDICE      DATETIME NULL,
	LB_INDICE_INITIAL       VARCHAR(20) NULL,
	LB_INDICE_ACTUEL        VARCHAR(20) NULL,
	LB_PROCHAIN_INDICE      VARCHAR(20) NULL
)

INSERT INTO #HRV (PK_BAIL, CD_INDICE_REVISION, DT_REVISION_PRECEDENTE, CD_PERIODICITE_REVISION, DT_PROCHAINE_REVISION, MT_INITIAL, VAL_INDICE_INITIAL, VAL_INDICE_ACTUEL, VAL_PROCHAIN_INDICE, CD_INDICE_INITIAL, CD_INDICE_ACTUEL, CD_PROCHAIN_INDICE, DT_INDICE_INITIAL, DT_INDICE_ACTUEL, DT_PROCHAIN_INDICE, LB_INDICE_INITIAL, LB_INDICE_ACTUEL, LB_PROCHAIN_INDICE)
SELECT PK_BAIL, CD_INDICE_REVISION, DT_REVISION_PRECEDENTE, CD_PERIODICITE_REVISION, ISNULL(DT_PROCHAINE_REVISION, DATEADD(month, CD_PERIODICITE_REVISION, DT_REVISION_PRECEDENTE)) AS DT_PROCHAINE_REVISION,
       MT_INITIAL, VAL_INDICE_INITIAL, VAL_INDICE_ACTUEL, VAL_PROCHAIN_INDICE, CD_INDICE_INITIAL, CD_INDICE_ACTUEL, CD_PROCHAIN_INDICE, DT_INDICE_INITIAL, DT_INDICE_ACTUEL, DT_PROCHAIN_INDICE, LB_INDICE_INITIAL, LB_INDICE_ACTUEL, LB_PROCHAIN_INDICE
FROM (SELECT PK_BAIL, CD_INDICE_REVISION, DT_REVISION_PRECEDENTE, DT_PROCHAINE_REVISION, CD_PERIODICITE_REVISION, MT_INITIAL, VAL_INDICE_INITIAL, VAL_INDICE_ACTUEL, VAL_PROCHAIN_INDICE, CD_INDICE_INITIAL, CD_INDICE_ACTUEL, CD_PROCHAIN_INDICE, DT_INDICE_INITIAL, DT_INDICE_ACTUEL, DT_PROCHAIN_INDICE, LB_INDICE_INITIAL, LB_INDICE_ACTUEL, LB_PROCHAIN_INDICE,
             RANK() OVER (PARTITION BY PK_BAIL ORDER BY PK_BAIL, DT_REVISION_PRECEDENTE DESC, CRUB, PK) AS RK
      FROM #HRV_RUB AS HR
      WHERE EXISTS (SELECT * FROM ESTIA_HQLOCAT AS E WHERE E.FK_BAIL = HR.PK_BAIL AND E.CRUB = HR.CRUB AND @DT BETWEEN E.DDEB AND ISNULL(E.DFIN,'2999/01/01'))) AS TMP
WHERE RK = 1

PRINT 'TABLE TEMPORAIRE SUR LA REVISION AU NIVEAU BAUX'



DROP TABLE #HRV_RUB


--#######################################################################################################################
--######################################### REMPLISSAGE DE LA TABLE DEFINITIVE ##########################################
--#######################################################################################################################


DELETE FROM SAFIR_ESTIA..F_ETAT_LOCATIF 
WHERE MONTH(@DT) = MONTH(PK_TEMPS) 
AND YEAR(@DT) = YEAR(PK_TEMPS)
AND @DT <> DATEADD(quarter, DATEDIFF(quarter, 0, CONVERT(DATETIME, CONVERT(VARCHAR(10), GETDATE() ,103), 103)), 0)
AND (DAY(PK_TEMPS) = DAY(@DT) AND @DEL_JUST_DAY = 'O' OR @DEL_JUST_DAY <> 'O')

DECLARE @DT_REF DATETIME
SET @DT_REF = CONVERT(DATETIME, CONVERT(VARCHAR(10),GETDATE(),103), 103)

INSERT INTO SAFIR_ESTIA..F_ETAT_LOCATIF (DT_REF, PK_TEMPS, PK_LOT, FK_PROPRIETAIRE, FK_MANDAT_GERANCE, FK_IMMEUBLE, FK_BAIL, FK_LOCATAIRE, CMANDAT, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CCOMPTE, NOBAIL, OCC_PREC, CCOMPTE_PREC, NOBAIL_PREC, OCC_SUIV, CCOMPTE_SUIV, NOBAIL_SUIV, IND_LOT_PRINCIPAL, CD_STATUT, LB_STATUT, DT_DEBUT_STATUT, DT_FIN_STATUT, CD_SOCIETE_PRECEDENTE, NM_MANDAT_PRECEDENT, CD_MANDAT_PRECEDENT, NM_BAIL_PRECEDENT, CD_BAIL_PRECEDENT, NOM_LOCATAIRE_PRECEDENT, DT_ENTREE_LOCATAIRE_PRECEDENT, DT_SORTIE_LOCATAIRE_PRECEDENT, VAL_SURFACE_TOTALE, VAL_SURFACE_LOUEE, VAL_SURFACE_VACANTE, VAL_SURF_CORRIGEE_TOTALE, VAL_SURF_CORRIGEE_LOUEE, VAL_SURF_CORRIGEE_VACANTE, NB_LOTS_TOTAL, NB_LOTS_LOUES, NB_LOTS_VANCATS, NB_PARKINGS, NB_PARKINGS_LOUES, NB_PARKINGS_VACANTS, NB_EMPLACEMENTS_PARKING, NB_EMPLACEMENTS_PARKING_LOUES, NB_EMPLACEMENTS_PARKING_VACANTS, MT_LOYER_FACIAL, MT_LOYER_ACTUEL, MT_LOYER_ACTUEL_FACTURABLE, MT_CHARGES, MT_DG, MT_LOYER_FRANCHISE, MT_PALIER, CD_INDICE_INITIAL, DT_INDICE_INITIAL, VAL_INDICE_INITIAL, LB_INDICE_INITIAL, CD_INDICE_ACTUEL, DT_INDICE_ACTUEL, VAL_INDICE_ACTUEL, LB_INDICE_ACTUEL, CD_PROCHAIN_INDICE, DT_PROCHAIN_INDICE, VAL_PROCHAIN_INDICE, LB_PROCHAIN_INDICE, DT_REVISION_PRECEDENTE, DT_PROCHAINE_REVISION, DT_RISQUE, CD_INDICE_REVISION)

SELECT @DT_REF AS DT_REF, @DT AS PK_TEMPS, W.FK_LOCAL AS PK_LOT, W.FK_PROPRIETAIRE AS FK_PROPRIETAIRE,
       W.FK_MANGES AS FK_MANDAT_GERANCE, W.FK_GROUPE AS FK_IMMEUBLE,
       W.FK_BAIL AS FK_BAIL, W.FK_TIERS AS FK_LOCATAIRE,

       W.CMANDAT, W.CORG, W.CAGENCE, W.CGROUPE, W.CIMMEUB, W.CLOCAL, W.OCC, W.CCOMPTE, W.NOBAIL,
       W.OCC_PREC, W.CCOMPTE_PREC, W.NOBAIL_PREC, W.OCC_SUIV, W.CCOMPTE_SUIV, W.NOBAIL_SUIV,

       W.IND_LOT_PRINCIPAL, W.CD_STATUT, CASE CD_STATUT WHEN 'L' THEN 'Loué' ELSE 'Vacant' END AS LB_STATUT,
       W.DT_DEBUT_RAT AS DT_DEBUT_STATUT, W.DT_FIN_RAT AS DT_FIN_STATUT,

       CASE WHEN W.FK_BAIL_PREC > 0 THEN W.CORG END AS CD_SOCIETE_PRECEDENTE,
       CASE WHEN W.FK_BAIL_PREC > 0 AND ISNUMERIC(W.CMANDAT) <> 0 THEN CONVERT(INT, W.CMANDAT) END AS NM_MANDAT_PRECEDENT,
       CASE WHEN W.FK_BAIL_PREC > 0 THEN W.CMANDAT END AS CD_MANDAT_PRECEDENT,

       CASE WHEN ISNUMERIC(W.CCOMPTE_PREC) <> 0 THEN CONVERT(NUMERIC(15,0), W.CCOMPTE_PREC) * 100 + W.NOBAIL_PREC END AS NM_BAIL_PRECEDENT,
       W.CCOMPTE_PREC + '/' + REPLACE(STR(W.NOBAIL_PREC, 2, 0), ' ', '0') AS CD_BAIL_PRECEDENT,
       W.LTIERS_PREC AS NOM_LOCATAIRE_PRECEDENT,
       W.DT_ENTREE_PREC AS DT_ENTREE_LOCATAIRE_PRECEDENT,
       W.DT_SORTIE_PREC AS DT_SORTIE_LOCATAIRE_PRECEDENT,
       

       S.SURF_HAB AS VAL_SURFACE_TOTALE,
       CASE WHEN W.CD_STATUT = 'L' THEN S.SURF_HAB ELSE 0 END AS VAL_SURFACE_LOUEE,
       CASE WHEN W.CD_STATUT = 'L' THEN 0 ELSE S.SURF_HAB END AS VAL_SURFACE_VACANTE,

       S.SURF_COR AS VAL_SURF_CORRIGEE_TOTALE,
       CASE WHEN W.CD_STATUT = 'L' THEN S.SURF_COR ELSE 0 END AS VAL_SURF_CORRIGEE_LOUEE,
       CASE WHEN W.CD_STATUT = 'L' THEN 0 ELSE S.SURF_COR END AS VAL_SURF_CORRIGEE_VACANTE,
       
       CONVERT(INT, 1) AS NB_LOTS_TOTAL,
       CASE WHEN W.CD_STATUT = 'L' THEN 1 ELSE 0 END AS NB_LOTS_LOUES,
       CASE WHEN W.CD_STATUT = 'L' THEN 0 ELSE 1 END AS NB_LOTS_VANCATS,
       
       CASE WHEN PTL.NB_EMPLACEMENTS_PARKING>0 THEN 1 ELSE 0 END AS NB_PARKINGS,
       CASE WHEN W.CD_STATUT= 'L' AND PTL.NB_EMPLACEMENTS_PARKING>0 THEN 1 ELSE 0 END AS NB_PARKINGS_LOUES,
       CASE WHEN W.CD_STATUT<>'L' AND PTL.NB_EMPLACEMENTS_PARKING>0 THEN 1 ELSE 0 END AS NB_PARKINGS_VACANTS,
       
       ISNULL(NB_EMPLACEMENTS_PARKING, 0) AS NB_EMPLACEMENTS_PARKING,
       CASE WHEN W.CD_STATUT= 'L' THEN ISNULL(NB_EMPLACEMENTS_PARKING, 0) ELSE 0 END AS NB_EMPLACEMENTS_PARKING_LOUES,
       CASE WHEN W.CD_STATUT<>'L' THEN ISNULL(NB_EMPLACEMENTS_PARKING, 0) ELSE 0 END AS NB_EMPLACEMENTS_PARKING_VACANTS,
       
       ISNULL(TRT_PRL.MT_LOYER_FACIAL,0) + CASE WHEN TRT_RUB.SURF_HAB>0 THEN ISNULL(TRT_RUB.MT_LOYER_FACIAL,0) * ISNULL(S.SURF_HAB,0) / TRT_RUB.SURF_HAB ELSE ISNULL(TRT_RUB.MT_LOYER_FACIAL,0) / ISNULL(TRT_RUB.NB_LOTS,1) END AS MT_LOYER_FACIAL,
       ISNULL(TRT_PRL.MT_LOYER_ACTUEL,0) + CASE WHEN TRT_RUB.SURF_HAB>0 THEN ISNULL(TRT_RUB.MT_LOYER_ACTUEL,0) * ISNULL(S.SURF_HAB,0) / TRT_RUB.SURF_HAB ELSE ISNULL(TRT_RUB.MT_LOYER_ACTUEL,0) / ISNULL(TRT_RUB.NB_LOTS,1) END AS MT_LOYER_ACTUEL,
       ISNULL(TRT_PRL.MT_LOYER_ACTUEL_FACTURABLE,0) + CASE WHEN TRT_RUB.SURF_HAB>0 THEN ISNULL(TRT_RUB.MT_LOYER_ACTUEL_FACTURABLE,0) * ISNULL(S.SURF_HAB,0) / TRT_RUB.SURF_HAB ELSE ISNULL(TRT_RUB.MT_LOYER_ACTUEL_FACTURABLE,0) / ISNULL(TRT_RUB.NB_LOTS,1) END AS MT_LOYER_ACTUEL_FACTURABLE,
	   
       ISNULL(TRT_PRL.MT_CHARGES,0) + CASE WHEN TRT_RUB.SURF_HAB>0 THEN ISNULL(TRT_RUB.MT_CHARGES,0) * ISNULL(S.SURF_HAB,0) / TRT_RUB.SURF_HAB ELSE ISNULL(TRT_RUB.MT_CHARGES,0) / ISNULL(TRT_RUB.NB_LOTS,1) END AS MT_CHARGES,

       --ISNULL(TRT_PRL.MT_DG,0) + CASE WHEN TRT_RUB.SURF_HAB>0 THEN ISNULL(TRT_RUB.MT_DG,0) * ISNULL(S.SURF_HAB,0) / TRT_RUB.SURF_HAB ELSE ISNULL(TRT_RUB.MT_DG,0) / ISNULL(TRT_RUB.NB_LOTS,1) END AS MT_DG,
       CASE WHEN SB.SURF_HAB>0 THEN ISNULL(DG.MT_DG,0) * ISNULL(S.SURF_HAB,0) / SB.SURF_HAB ELSE ISNULL(DG.MT_DG,0) / ISNULL(SB.NB_LOTS,1) END AS MT_DG,
	   ISNULL(TRT_PRL.MT_LOYER_FRANCHISE,0) + CASE WHEN TRT_RUB.SURF_HAB>0 THEN ISNULL(TRT_RUB.MT_LOYER_FRANCHISE,0) * ISNULL(S.SURF_HAB,0) / TRT_RUB.SURF_HAB ELSE ISNULL(TRT_RUB.MT_LOYER_FRANCHISE,0) / ISNULL(TRT_RUB.NB_LOTS,1) END AS MT_LOYER_FRANCHISE,
	   ISNULL(TRT_PRL.MT_PALIER,0) + CASE WHEN TRT_RUB.SURF_HAB>0 THEN ISNULL(TRT_RUB.MT_PALIER,0) * ISNULL(S.SURF_HAB,0) / TRT_RUB.SURF_HAB ELSE ISNULL(TRT_RUB.MT_PALIER,0) / ISNULL(TRT_RUB.NB_LOTS,1) END AS MT_PALIER,

-- Debut modif MNA - 20190402
       CASE WHEN P.INDICE_BASE IS NOT NULL THEN left(P.INDICE_BASE, 1) + SUBSTRING(P.INDICE_BASE, 3, 4) else ISNULL(LOCATION.INDREF, REV.CD_INDICE_INITIAL) end CD_INDICE_INITIAL, 
	   REV.DT_INDICE_INITIAL AS MOIS_INDICE_INITIAL, 
	   ISNULL(P.VAL_INDICE_BASE, ISNULL(INDICE.VAL, REV.VAL_INDICE_INITIAL)) VAL_INDICE_INITIAL, 
	   REV.LB_INDICE_INITIAL,
 -- Fin modif MNA - 20190402
       REV.CD_INDICE_ACTUEL, 
	   REV.DT_INDICE_ACTUEL AS MOIS_INDICE_ACTUEL, 
	   REV.VAL_INDICE_ACTUEL, 
	   REV.LB_INDICE_ACTUEL,
       REV.CD_PROCHAIN_INDICE, 
	   REV.DT_PROCHAIN_INDICE AS MOIS_PROCHAIN_INDICE, 
	   REV.VAL_PROCHAIN_INDICE, 
	   REV.LB_PROCHAIN_INDICE,
       REV.DT_REVISION_PRECEDENTE, 
	   REV.DT_PROCHAINE_REVISION,
       
       --CASE WHEN WH.CD_NATURE_BAIL IN ('CO', 'C9') THEN
            CASE WHEN @DT <= DT_RISQUE_CPLT_BAIL THEN DT_RISQUE_CPLT_BAIL
                             WHEN @DT <= WH.DT_TRIEN_POT_1 THEN DT_TRIEN_POT_1
                             WHEN @DT <= WH.DT_TRIEN_POT_2 THEN DT_TRIEN_POT_2
                             WHEN @DT <= WH.DT_TRIEN_POT_3 THEN DT_TRIEN_POT_3
                             WHEN @DT <= WH.DT_TRIEN_POT_4 THEN DT_TRIEN_POT_4
                             WHEN @DT <= WH.DT_TRIEN_POT_5 THEN DT_TRIEN_POT_5
                             WHEN @DT <= WH.DT_TRIEN_POT_6 THEN DT_TRIEN_POT_6
                             WHEN @DT <= WH.DT_TRIEN_POT_7 THEN DT_TRIEN_POT_7
                        END            
            --WHEN CD_NATURE_BAIL IN ('P6', 'DE', 'M6', 'DC') THEN DT_EXPIRATION
       --END 
	   AS DT_RISQUE,
	   REV.CD_INDICE_REVISION


FROM WRK_HISTO_LOT AS W
     LEFT JOIN #SURF AS S
          ON S.PK_LOCAL = W.FK_LOCAL
     LEFT JOIN P_TYPE_LOT AS PTL
          ON PTL.CD_TYPE_LOT = W.CTYPLOG
     LEFT JOIN #TMP_RUB_TYPE AS TRT_RUB
          ON TRT_RUB.PK_BAIL = W.FK_BAIL
          AND TRT_RUB.CD_COR_TYPE_LOT_RUBRIQUE = PTL.CD_COR_TYPE_LOT_RUBRIQUE
     LEFT JOIN #TMP_RUB_TYPE AS TRT_PRL
          ON TRT_PRL.PK_BAIL = W.FK_BAIL
          AND TRT_PRL.CD_COR_TYPE_LOT_RUBRIQUE = '$$$'
          AND W.IND_LOT_PRINCIPAL = 'O'
     LEFT JOIN #HRV AS REV
          ON REV.PK_BAIL = W.FK_BAIL
     LEFT JOIN WRK_HQRBAIL AS WH
          ON WH.PK_BAIL = W.FK_BAIL
          
     LEFT JOIN #DG AS DG
          ON DG.PK_BAIL = W.FK_BAIL
     LEFT JOIN #SURF_BAIL AS SB
          ON SB.PK_BAIL = W.FK_BAIL

-- Debut modif MNA - 20190402
	 LEFT JOIN MASTER_ESTIA..P_ETAT_LOC_INIT P
		  ON  P.PK_IMMEUBLE = W.FK_GROUPE and P.PK_BAIL = W.FK_BAIL
	 LEFT JOIN MASTER_ESTIA..ESTIA_LOCATION LOCATION
	      ON LOCATION.PK_LOCATION = W.FK_BAIL
	 LEFT JOIN MASTER_ESTIA..ESTIA_INDICE INDICE
	      ON INDICE.ANNEE = right(LOCATION.INDREF, 4) AND INDICE.MOIS = left(LOCATION.INDREF, 1) AND INDICE.CNUMI = LOCATION.CNUMI
-- Fin modif MNA - 20190402

WHERE @DT BETWEEN W.DT_DEBUT_RAT AND ISNULL(W.DT_FIN_RAT, '2999/01/01')

DROP TABLE #HRV
DROP TABLE #TMP_TYPE
DROP TABLE #TMP_RUB_TYPE
DROP TABLE #SURF
DROP TABLE #DG
DROP TABLE #SURF_BAIL

UPDATE SAFIR_ESTIA..F_ETAT_LOCATIF
 SET FK_BAIL = '88888',
     FK_LOCATAIRE = '88888',
	 CD_STATUT = 'L',
	 LB_STATUT = 'Loué',
	 NB_LOTS_LOUES = 1,
	 NB_LOTS_VANCATS = 0
  FROM SAFIR_ESTIA..F_ETAT_LOCATIF FEL
  LEFT JOIN SAFIR_ESTIA..D_LOT L
  ON L.PK_LOT = FEL.PK_LOT
WHERE FEL.PK_TEMPS = @DT
AND L.CD_TYPE_LOT = 'LOG'
AND FEL.CORG = '11'

COMMIT

SET ANSI_WARNINGS ON

END