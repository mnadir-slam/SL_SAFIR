
CREATE PROCEDURE [dbo].[BUILD_WRK_TABLES] 
AS
BEGIN

SET ANSI_WARNINGS OFF

DECLARE @DT DATETIME
SET @DT = CONVERT(DATETIME, CONVERT(VARCHAR(10),GETDATE(),103), 103)

--####################################################################################################################
--################################################ WRK_LOCAL_SURFACE #################################################
--####################################################################################################################


--WRK_LOCAL_SURFACE: TABLE DE TRAVAIL DES SURFACES DES LOTS
-- SWISS LIFE - DEBUT MODIF : la surface est la surface reelle ou la surface habitable si le surface reelle est nulle
TRUNCATE TABLE WRK_LOCAL_SURFACE
INSERT INTO WRK_LOCAL_SURFACE (CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, SURF_HAB, SURF_COR)
SELECT CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL,
       SUM(CASE WHEN CSTE = 'HAB' THEN SURFACE ELSE 0 END) AS SURF_HAB,
       SUM(CASE WHEN CSTE = 'COR' THEN SURFACE ELSE 0 END) AS SURF_COR
FROM (/*SELECT LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL, SURFLOC.CSTE,
--             CASE WHEN SURFLOC.CSTE = 'HAB' THEN (CASE WHEN SURFLOC.SHAB = 0 THEN SURFLOC.SREELLE ELSE SURFLOC.SHAB END) ELSE (CASE WHEN SURFLOC.SCORR = 0 THEN SURFLOC.SREELLE ELSE SURFLOC.SCORR END) END AS SURFACE,
--22/04/2012 :bsol : Ajout de la surface réelle si les autres non renseignées-----
             CASE WHEN SURFLOC.CSTE = 'HAB'  THEN (CASE WHEN SURFLOC.SHAB = 0 THEN SURFLOC.SREELLE ELSE SURFLOC.SHAB END) ELSE (CASE WHEN SURFLOC.SCORR = 0 THEN SURFLOC.SREELLE ELSE SURFLOC.SCORR END) END AS SURFACE,
             RANK() OVER (PARTITION BY LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL, SURFLOC.CSTE
                          ORDER BY LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL, SURFLOC.CSTE,
                                   CASE WHEN @DT >= SURFLOC.DEFFET THEN SURFLOC.DEFFET ELSE '1900/01/01' END DESC,
                                   CASE WHEN @DT <  SURFLOC.DEFFET THEN SURFLOC.DEFFET ELSE '2999/01/01' END ASC,
                                   SURFLOC.PK_SURFLOC) AS RK
      FROM ESTIA_LOCAL AS LOCAL
	  LEFT JOIN ESTIA_PLOCAL AS PLOCAL
	  ON PLOCAL.CORG = LOCAL.CORG
	  AND PLOCAL.CAGENCE = LOCAL.CAGENCE
	  AND PLOCAL.CGROUPE = LOCAL.CGROUPE
	  AND PLOCAL.CIMMEUB = LOCAL.CIMMEUB
	  AND PLOCAL.CPLOCAL = LOCAL.CLOCAL
		LEFT JOIN ESTIA_SURFLOC AS SURFLOC
		ON SURFLOC.CORG = LOCAL.CORG
		AND SURFLOC.CAGENCE = LOCAL.CAGENCE
		AND SURFLOC.CGROUPE = LOCAL.CGROUPE
		AND SURFLOC.CIMMEUB = LOCAL.CIMMEUB
		AND SURFLOC.CLOCAL = LOCAL.CLOCAL
		AND SURFLOC.CSTE IN ('HAB', 'COR')
	WHERE @DT BETWEEN LOCAL.DEBLOC AND ISNULL(LOCAL.DFINML,'9999/01/01')
	--AND PLOCAL.CNATLOG <> 'ST'*/
	SELECT LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL, SURFLOC.CSTE,
	CASE WHEN SURFLOC.CSTE = 'HAB' THEN
		case when PLOCAL.CNATLOG <> 'ST' then 
			--(CASE WHEN SURFLOC.SHAB = 0 THEN SURFLOC.SREELLE ELSE SURFLOC.SHAB END) 
			(CASE WHEN SURFLOC.SREELLE = 0 THEN SURFLOC.SHAB ELSE SURFLOC.SREELLE END)
		else 0 end
	ELSE 
		case when PLOCAL.CNATLOG <> 'ST' then
			--(CASE WHEN SURFLOC.SCORR = 0 THEN SURFLOC.SREELLE ELSE SURFLOC.SCORR END)
			(CASE WHEN SURFLOC.SREELLE = 0 THEN SURFLOC.SCORR ELSE SURFLOC.SREELLE END)
		else 0 end 
	END AS SURFACE,
	RANK() OVER 
	(
		PARTITION BY LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL, SURFLOC.CSTE
		ORDER BY LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL, SURFLOC.CSTE,
		CASE WHEN @DT >= SURFLOC.DEFFET THEN SURFLOC.DEFFET ELSE '1900/01/01' END DESC,
		CASE WHEN @DT <  SURFLOC.DEFFET THEN SURFLOC.DEFFET ELSE '2999/01/01' END ASC, SURFLOC.PK_SURFLOC
	) AS RK
	FROM ESTIA_LOCAL AS LOCAL
	LEFT JOIN ESTIA_PLOCAL AS PLOCAL
	ON PLOCAL.CORG = LOCAL.CORG
	AND PLOCAL.CAGENCE = LOCAL.CAGENCE
	AND PLOCAL.CGROUPE = LOCAL.CGROUPE
	AND PLOCAL.CIMMEUB = LOCAL.CIMMEUB
	AND PLOCAL.CPLOCAL = LOCAL.CLOCAL
	LEFT JOIN ESTIA_SURFLOC AS SURFLOC
	ON SURFLOC.CORG = LOCAL.CORG
	AND SURFLOC.CAGENCE = LOCAL.CAGENCE
	AND SURFLOC.CGROUPE = LOCAL.CGROUPE
	AND SURFLOC.CIMMEUB = LOCAL.CIMMEUB
	AND SURFLOC.CLOCAL = LOCAL.CLOCAL
	AND SURFLOC.CSTE IN ('HAB', 'COR')
	WHERE @DT BETWEEN LOCAL.DEBLOC AND ISNULL(LOCAL.DFINML,'9999/01/01')
) AS TMP
WHERE RK = 1
GROUP BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL
-- SWISS LIFE - FIN MODIF
PRINT 'WRK_LOCAL_SURFACE: TABLE DE TRAVAIL DES SURFACES DES LOTS'


--####################################################################################################################
--############################################### WRK_IMMEUB_SURFACE #################################################
--####################################################################################################################

--WRK_IMMEUB_SURFACE: TABLE DE TRAVAIL DES SURFACES DES BATIMENTS
TRUNCATE TABLE WRK_IMMEUB_SURFACE
INSERT INTO WRK_IMMEUB_SURFACE (CORG, CAGENCE, CGROUPE, CIMMEUB, SURF_HAB, SURF_COR)
SELECT CORG, CAGENCE, CGROUPE, CIMMEUB, SUM(SURF_HAB) AS SURF_HAB, SUM(SURF_COR) AS SURF_COR
FROM WRK_LOCAL_SURFACE
GROUP BY CORG, CAGENCE, CGROUPE, CIMMEUB

PRINT 'WRK_IMMEUB_SURFACE: TABLE DE TRAVAIL DES SURFACES DES BATIMENTS'


--####################################################################################################################
--############################################### WRK_GROUPE_SURFACE #################################################
--####################################################################################################################

--WRK_GROUPE_SURFACE: TABLE DE TRAVAIL DES SURFACES DES IMMEUBLES
TRUNCATE TABLE WRK_GROUPE_SURFACE
INSERT INTO WRK_GROUPE_SURFACE (CORG, CAGENCE, CGROUPE, NB_LOTS, SURF_HAB, SURF_COR)
SELECT CORG, CAGENCE, CGROUPE, COUNT(*) AS NB_LOTS, SUM(SURF_HAB) AS SURF_HAB, SUM(SURF_COR) AS SURF_COR
FROM WRK_LOCAL_SURFACE
GROUP BY CORG, CAGENCE, CGROUPE

PRINT 'WRK_GROUPE_SURFACE: TABLE DE TRAVAIL DES SURFACES DES IMMEUBLES'


--####################################################################################################################
--################################################ WRK_GROUPE_MANGES #################################################
--####################################################################################################################

--WRK_GROUPE_MANGES: TABLE DE TRAVAIL DES MANDATS LIES AUX IMMEUBLES
TRUNCATE TABLE WRK_GROUPE_MANGES
INSERT INTO WRK_GROUPE_MANGES (PK_GROUPE, FK_MANGES, CORG, CAGENCE, CGROUPE, CMANDAT)
SELECT PK_GROUPE, FK_MANGES, CORG, CAGENCE, CGROUPE, CMANDAT
FROM (SELECT MANPAT.FK_GROUPE AS PK_GROUPE, MANPAT.CORG, MANPAT.CAGENCE, MANPAT.CGROUPE, MANGES.PK_MANGES AS FK_MANGES, MANGES.CMANDAT,
             RANK() OVER (PARTITION BY MANPAT.CORG, MANPAT.CAGENCE, MANPAT.CGROUPE
                          ORDER BY MANPAT.CORG, MANPAT.CAGENCE, MANPAT.CGROUPE, ISNULL(MANGES.DATTRIB,'1900/01/01'), PK_MANPAT) AS RK
      FROM ESTIA_MANGES AS MANGES
           INNER JOIN ESTIA_MANPAT AS MANPAT
                 ON MANPAT.CMANDAT = MANGES.CMANDAT
      WHERE MANPAT.FK_GROUPE IS NOT NULL AND CONVERT(DATETIME, CONVERT(VARCHAR(10), GETDATE(), 103), 103) BETWEEN ISNULL(MANGES.DEFFET, '1900/01/01') AND 
                      ISNULL(MANGES.DFINGEST, '2999/01/01')) AS TMP
WHERE RK = 1

UPDATE WRK_GROUPE_MANGES
SET FK_TIERS = MANPROP.FK_TIERS
FROM WRK_GROUPE_MANGES AS WGM
     LEFT JOIN ESTIA_MANPROP AS MANPROP
          ON MANPROP.CMANDAT = WGM.CMANDAT
          AND MANPROP.RK = 1


PRINT 'WRK_GROUPE_MANGES: TABLE DE TRAVAIL DES MANDATS LIES AUX IMMEUBLES'


--####################################################################################################################
--################################################ WRK_MANGES_GROUPE #################################################
--####################################################################################################################

--WRK_MANGES_GROUPE: TABLE DE TRAVAIL DE L'IMMEUBLE RATTACHE A CHAQUE MANDAT
TRUNCATE TABLE WRK_MANGES_GROUPE
INSERT INTO WRK_MANGES_GROUPE (PK_MANGES, FK_GROUPE, CMANDAT, CORG, CAGENCE, CGROUPE)
SELECT PK_MANGES, FK_GROUPE, CMANDAT, CORG, CAGENCE, CGROUPE
FROM (SELECT MANGES.PK_MANGES, MANGES.CMANDAT, MANPAT.FK_GROUPE, MANPAT.CORG, MANPAT.CAGENCE, MANPAT.CGROUPE,
             RANK() OVER (PARTITION BY MANGES.CMANDAT
                          ORDER BY MANGES.CMANDAT, MANPAT.CORG, MANPAT.CAGENCE, MANPAT.CGROUPE, PK_MANPAT) AS RK
      FROM ESTIA_MANGES AS MANGES
           INNER JOIN ESTIA_MANPAT AS MANPAT
                 ON MANPAT.CMANDAT = MANGES.CMANDAT
      WHERE MANPAT.FK_GROUPE IS NOT NULL AND CONVERT(DATETIME, CONVERT(VARCHAR(10), GETDATE(), 103), 103) BETWEEN ISNULL(MANGES.DEFFET, '1900/01/01') AND 
                      ISNULL(MANGES.DFINGEST, '2999/01/01')) AS TMP
WHERE RK = 1

PRINT 'WRK_MANGES_GROUPE: TABLE DE TRAVAIL DE L''IMMEUBLE RATTACHE A CHAQUE MANDAT'


--####################################################################################################################
--############################################# WRK_LOCATION_BANALDET ################################################
--####################################################################################################################

--WRK_LOCATION_BANALDET: TABLE DE TRAVAIL SUR LES DATES DE BREAK AU NIVEAU DES BAUX
TRUNCATE TABLE WRK_LOCATION_BANALDET
INSERT INTO WRK_LOCATION_BANALDET (CORG, CCOMPTE, NOBAIL, DT_BREAK1, DT_BREAK2, DT_BREAK3, DT_BREAK4, DT_BREAK5, DT_BREAK6, DT_BREAK7)
SELECT CORG, CCOMPTE, NOBAIL,
       MAX(CASE WHEN RK = 1 THEN DT_BREAK END) AS DT_BREAK1,
       MAX(CASE WHEN RK = 2 THEN DT_BREAK END) AS DT_BREAK2,
       MAX(CASE WHEN RK = 3 THEN DT_BREAK END) AS DT_BREAK3,
       MAX(CASE WHEN RK = 4 THEN DT_BREAK END) AS DT_BREAK4,
       MAX(CASE WHEN RK = 5 THEN DT_BREAK END) AS DT_BREAK5,
       MAX(CASE WHEN RK = 6 THEN DT_BREAK END) AS DT_BREAK6,
       MAX(CASE WHEN RK = 7 THEN DT_BREAK END) AS DT_BREAK7
FROM (SELECT CORG, ZONCLE1 AS CCOMPTE, CONVERT(INT, ZONCLE2) AS NOBAIL, DATE01 AS DT_BREAK,
             RANK() OVER (PARTITION BY CORG, ZONCLE1, ZONCLE2
                          ORDER BY CORG, ZONCLE1, ZONCLE2, CAST(DATE01 AS DATETIME), PK_BANALDET) AS RK
      FROM ESTIA_BANALDET
      WHERE CSTE = 'BREAKOPT'
      AND CORG IS NOT NULL
      AND ZONCLE1 IS NOT NULL
      AND ISNUMERIC(ZONCLE2) <> 0
      AND DATE01 IS NOT NULL) AS T
GROUP BY CORG, CCOMPTE, NOBAIL

PRINT 'WRK_LOCATION_BANALDET: TABLE DE TRAVAIL SUR LES DATES DE BREAK AU NIVEAU DES BAUX'


--####################################################################################################################
--################################################## WRK_HQRBAIL #####################################################
--####################################################################################################################

--REMPLISSAGE AVEC LES DONNEES DU BAIL ET DES RENOUVELLEMENTS
TRUNCATE TABLE WRK_HQRBAIL
INSERT INTO WRK_HQRBAIL (PK_BAIL, CORG, CCOMPTE, NOBAIL, CD_NATURE_BAIL, DT_PREMIER_BAIL, DT_EFFET, DT_SIGNATURE, DT_ENTREE, DT_EXPIRATION, DUREE_MOIS, DUR_MINIMUM_BAIL_MOIS, DT_SORTIE, DUREE_PREAVIS)
SELECT LOCATION.FK_BAIL, LOCATION.CORG, LOCATION.CCOMPTE, LOCATION.NOBAIL, LOCATION.CBAIL AS CD_NATURE_BAIL,
       MIN(HQRBAIL.DRENOUV) AS DT_PREMIER_BAIL,
       MAX(ISNULL(HQRBAIL.DRENOUV, LOCATION.DATEFFET)) AS DT_EFFET,
	   MAX(ISNULL(HQRBAIL.DSIGNLOC, LOCATION.DATENTBAIL)) AS DT_SIGNATURE,
       LOCATION.DATENTQUIT AS DT_ENTREE,
       DATEADD(day, -1,   MAX(DATEADD(month, LOCATION.DURBAIL, ISNULL(HQRBAIL.DRENOUV, LOCATION.DATEFFET)))) AS DT_EXPIRATION,
       LOCATION.DURBAIL AS DUREE_MOIS,
       ISNULL(LOCATION.PFERME, 0) AS DUR_MINIMUM_BAIL_MOIS,
       LOCATION.DATSORQUIT AS DT_SORTIE, LOCATION.DURPREAV AS DUREE_PREAVIS
FROM ESTIA_LOCATION AS LOCATION
     LEFT JOIN ESTIA_HQRBAIL AS HQRBAIL
          ON HQRBAIL.CORG = LOCATION.CORG
          AND HQRBAIL.CCOMPTE = LOCATION.CCOMPTE
          AND HQRBAIL.NOBAIL = LOCATION.NOBAIL
WHERE LOCATION.NOLOCAT = LOCATION.CONTLOC
GROUP BY LOCATION.FK_BAIL, LOCATION.CORG, LOCATION.CCOMPTE, LOCATION.NOBAIL, LOCATION.DATENTQUIT,
         LOCATION.CBAIL, LOCATION.DATSORQUIT, LOCATION.PFERME, LOCATION.DURBAIL, LOCATION.DURPREAV


--CALCUL DE LA DATE MINIMUM ET DES TRIENALES POTENTIELLES
UPDATE WRK_HQRBAIL
SET DT_TRIEN_POT_1 = DATEADD(day, -1, DATEADD(year,3,DT_EFFET)),
DT_TRIEN_POT_2 = DATEADD(day, -1, DATEADD(year,6,DT_EFFET)),
DT_TRIEN_POT_3 = DATEADD(day, -1, DATEADD(year,9,DT_EFFET)),
DT_TRIEN_POT_4 = DATEADD(day, -1, DATEADD(year,12,DT_EFFET)),
DT_TRIEN_POT_5 = DATEADD(day, -1, DATEADD(year,15,DT_EFFET)),
DT_TRIEN_POT_6 = DATEADD(day, -1, DATEADD(year,18,DT_EFFET)),
DT_TRIEN_POT_7 = DATEADD(day, -1, DATEADD(year,21,DT_EFFET)),
DT_MINIMUM = DATEADD(day, -1, DATEADD(month,CASE WHEN DUR_MINIMUM_BAIL_MOIS>0 THEN DUR_MINIMUM_BAIL_MOIS END,DT_EFFET))


--MISE A JOUR POUR LES DATES SAISIES SUR LES BAUX
UPDATE WRK_HQRBAIL
SET DT_TRIEN_POT_1 = WLB.DT_BREAK1,
DT_TRIEN_POT_2 = WLB.DT_BREAK2,
DT_TRIEN_POT_3 = WLB.DT_BREAK3,
DT_TRIEN_POT_4 = WLB.DT_BREAK4,
DT_TRIEN_POT_5 = WLB.DT_BREAK5,
DT_TRIEN_POT_6 = WLB.DT_BREAK6,
DT_TRIEN_POT_7 = WLB.DT_BREAK7,
IND_CALCUL_BANALDET = 'O'
FROM WRK_HQRBAIL AS WH
     INNER JOIN WRK_LOCATION_BANALDET AS WLB
           ON WLB.CORG = WH.CORG
           AND WLB.CCOMPTE = WH.CCOMPTE
           AND WLB.NOBAIL = WH.NOBAIL


--CALCUL DE LA DATE DE RISQUE DANS LE COMPLEMENT DU BAIL
--UPDATE WRK_HQRBAIL
--SET DT_RISQUE_CPLT_BAIL = DT_MINIMUM


--CALCUL DE LA PROCHAINE TRIENALE POTENTIELLE
UPDATE WRK_HQRBAIL
SET DT_PRCH_TRIEN_POT = CASE --WHEN @DT <= DT_RISQUE_CPLT_BAIL THEN DT_RISQUE_CPLT_BAIL
                             WHEN @DT <= DT_TRIEN_POT_1 THEN DT_TRIEN_POT_1
                             WHEN @DT <= DT_TRIEN_POT_2 THEN DT_TRIEN_POT_2
                             WHEN @DT <= DT_TRIEN_POT_3 THEN DT_TRIEN_POT_3
                             WHEN @DT <= DT_TRIEN_POT_4 THEN DT_TRIEN_POT_4
                             WHEN @DT <= DT_TRIEN_POT_5 THEN DT_TRIEN_POT_5
                             WHEN @DT < DT_TRIEN_POT_6 THEN DT_TRIEN_POT_6
                             WHEN @DT < DT_TRIEN_POT_7 THEN DT_TRIEN_POT_7
                        END

-- CALCUL DE LA PROCHAINE TRIENALE POTENTIELLE POUR LES BAUX COMMERCIAUX EXPIRES
UPDATE WRK_HQRBAIL
SET DT_PRCH_TRIEN_POT = DATEADD(MONTH, 6, DATEADD(DAY, -1, DATEADD(quarter, DATEDIFF(quarter, 0, @DT) + 1, 0)))
FROM WRK_HQRBAIL WH
LEFT JOIN ESTIA_LOCATION AS LOCATION
ON WH.CORG = LOCATION.CORG AND WH.CCOMPTE = LOCATION.CCOMPTE AND WH.NOBAIL = LOCATION.NOBAIL
LEFT JOIN P_NATURE_BAIL P
ON P.CD_NATURE_BAIL = LOCATION.CBAIL
WHERE P.CD_TYPE_BAIL = 'COM' AND DT_EXPIRATION < @DT

--CALCUL DE LA DATE DE RISQUE
UPDATE WRK_HQRBAIL
SET DT_RISQUE = --CASE WHEN CD_NATURE_BAIL IN ('CO', 'C9') THEN
                     CASE --DATE D'EXPIRATION ATTEINTE OU DEPASSEE
                               WHEN DT_EXPIRATION <= @DT THEN DT_EXPIRATION
                               --DATE DE RISQUE DU COMPLEMENT DE BAIL VIDE OU DEPASSEE
                               WHEN IND_CALCUL_BANALDET = 'O' /*OR DT_RISQUE_CPLT_BAIL IS NULL OR @DT > DT_RISQUE_CPLT_BAIL*/ THEN CASE WHEN DT_EXPIRATION < DT_PRCH_TRIEN_POT AND @DT <= DT_EXPIRATION  THEN DT_EXPIRATION ELSE DATEADD(MONTH, -DUREE_PREAVIS, DT_PRCH_TRIEN_POT) END --DT_PRCH_TRIEN_POT END
                               --DATE DE RISQUE DU COMPLEMENT DE BAIL NON VIDE ET NON DEPASSEE
  -- debut modif MNA 20181001
                          --     WHEN @DT <= DT_EXPIRATION /*AND DT_EXPIRATION < DT_RISQUE_CPLT_BAIL*/ THEN DT_EXPIRATION  --DATE D'EXPIRATION PROCHAINE ECHEANCE
                          --     --ELSE DT_RISQUE_CPLT_BAIL
                          --END
						  WHEN @DT <= DT_EXPIRATION THEN CASE WHEN P.CD_TYPE_BAIL = 'COM' THEN DATEADD(month, -DUREE_PREAVIS, DT_PRCH_TRIEN_POT) ELSE DT_EXPIRATION END END
      FROM WRK_HQRBAIL WH    
	 LEFT JOIN P_NATURE_BAIL P
		ON P.CD_NATURE_BAIL = WH.CD_NATURE_BAIL   
 -- fin modif MNA 20181001                    
                     --WHEN CD_NATURE_BAIL IN ('P6', 'DE', 'M6', 'DC') THEN DT_EXPIRATION
                     
                --END

-- CALCUL DE LA PROCHAINE TRIENALE POTENTIELLE POUR LES BAUX COMMERCIAUX EXPIRES
UPDATE WRK_HQRBAIL
SET DT_RISQUE = DATEADD(quarter, DATEDIFF(quarter, 0, @DT) + 1, 0)
FROM WRK_HQRBAIL WH
LEFT JOIN ESTIA_LOCATION AS LOCATION
ON WH.CORG = LOCATION.CORG AND WH.CCOMPTE = LOCATION.CCOMPTE AND WH.NOBAIL = LOCATION.NOBAIL
LEFT JOIN P_NATURE_BAIL P
ON P.CD_NATURE_BAIL = LOCATION.CBAIL
WHERE P.CD_TYPE_BAIL = 'COM' AND DT_EXPIRATION < @DT

PRINT 'WRK_HQRBAIL: TABLE DE TRAVAIL SUR LES DATES DES BAUX'

--####################################################################################################################
--############################################## WRK_LOCATION_HQLOCAT ################################################
--####################################################################################################################

--WRK_LOCATION_HQLOCAT: TABLE DE TRAVAIL SUR LES RUBRIQUES DE QUITTANCEMENT DES BAUX
TRUNCATE TABLE WRK_LOCATION_HQLOCAT
INSERT INTO WRK_LOCATION_HQLOCAT (PK_BAIL, CORG, CCOMPTE, NOBAIL, MT_DG_PRINCIPAL, MT_DG_ANNEXE, IND_DG_REVISABLE, DT_DEBUT_FRANCHISE, DT_FIN_FRANCHISE, DUREE_FRANCHISE_MOIS)
SELECT PK_BAIL, CORG, CCOMPTE, NOBAIL,
       SUM(CASE WHEN IND_DG_PRINCIPAL = 'O' AND RK_RUB = 1 THEN NB ELSE 0 END) AS MT_DG_PRINCIPAL,
       SUM(CASE WHEN IND_DG_ANNEXE = 'O' AND RK_RUB = 1 THEN NB ELSE 0 END) AS MT_DG_ANNEXE,
       MAX(CASE WHEN IND_DG_ANNEXE = 'O' OR IND_DG_PRINCIPAL = 'O' AND LREVIS <> 0 THEN 'O' ELSE 'N' END) AS IND_DG_REVISABLE,
       MIN(CASE WHEN IND_FRANCHISE_LOYER = 'O' THEN DDEB END) AS DT_DEBUT_FRANCHISE,
       MAX(CASE WHEN IND_FRANCHISE_LOYER = 'O' THEN DFIN END) AS DT_FIN_FRANCHISE,
       DATEDIFF(month, MIN(CASE WHEN IND_FRANCHISE_LOYER = 'O' THEN DDEB END), DATEADD(day, 1, MAX(CASE WHEN IND_FRANCHISE_LOYER = 'O' THEN CASE WHEN DFIN='9999-12-31' THEN '9999-12-30' ELSE DFIN END END))) AS DUREE_FRANCHISE_MOIS
       --DATEDIFF(month, MIN(CASE WHEN IND_FRANCHISE_LOYER = 'O' THEN DDEB END), DATEADD(day, 1, MAX(CASE WHEN IND_FRANCHISE_LOYER = 'O' THEN DFIN END))) AS DUREE_FRANCHISE_MOIS,
FROM (SELECT LOCATION.FK_BAIL AS PK_BAIL, LOCATION.CORG, LOCATION.CCOMPTE, LOCATION.NOBAIL, HQLOCAT.DDEB, HQLOCAT.DFIN, HQLOCAT.NB, HQLOCAT.LREVIS,
             P.IND_DG_PRINCIPAL, P.IND_DG_ANNEXE, P.IND_FRANCHISE_LOYER, 
             RANK() OVER (PARTITION BY HQLOCAT.CORG, HQLOCAT.CAGENCE, HQLOCAT.CGROUPE, HQLOCAT.CIMMEUB, HQLOCAT.CLOCAL, HQLOCAT.OCC, HQLOCAT.CRUB
             --ORDER BY HQLOCAT.CORG, HQLOCAT.CAGENCE, HQLOCAT.CGROUPE, HQLOCAT.CIMMEUB, HQLOCAT.CLOCAL, HQLOCAT.OCC, HQLOCAT.CRUB, HQLOCAT.DDEB DESC, HQLOCAT.PK_HQLOCAT DESC) AS RK_RUB
			 ORDER BY HQLOCAT.CORG, HQLOCAT.CAGENCE, HQLOCAT.CGROUPE, HQLOCAT.CIMMEUB, HQLOCAT.CLOCAL, HQLOCAT.OCC, HQLOCAT.CRUB, HQLOCAT.DDEB ASC, HQLOCAT.PK_HQLOCAT DESC) AS RK_RUB
      FROM ESTIA_LOCATION AS LOCATION
           INNER JOIN ESTIA_HQLOCAT AS HQLOCAT
                 ON HQLOCAT.CORG = LOCATION.CORG
                 AND HQLOCAT.CAGENCE = LOCATION.CAGENCE
                 AND HQLOCAT.CGROUPE = LOCATION.CGROUPE
                 AND HQLOCAT.CIMMEUB = LOCATION.CIMMEUB
                 AND HQLOCAT.CLOCAL = LOCATION.CLOCAL
                 AND HQLOCAT.OCC = LOCATION.OCC
				 AND LOCATION.NOLOCAT = LOCATION.CONTLOC
           INNER JOIN P_RUBRIQUE AS P
                 ON P.CD_RUBRIQUE = HQLOCAT.CRUB) AS TMP
GROUP BY PK_BAIL, CORG, CCOMPTE, NOBAIL

PRINT 'WRK_LOCATION_HQLOCAT: TABLE DE TRAVAIL SUR LES RUBRIQUES DE QUITTANCEMENT DES BAUX'


--####################################################################################################################
--############################################## WRK_LOCATION_LCAUTION ###############################################
--####################################################################################################################

--WRK_LOCATION_LCAUTION: TABLE DE TRAVAIL SUR LES CAUTIONS DES BAUX
TRUNCATE TABLE WRK_LOCATION_LCAUTION
INSERT INTO WRK_LOCATION_LCAUTION (CORG, CCOMPTE, NOBAIL, CD_TYPE_CAUTION, LB_TYPE_CAUTION, DT_DEBUT_CAUTION, DT_FIN_CAUTION, /*DUREE_CAUTION_MOIS,*/ MT_CAUTION, IND_REVISABLE)
SELECT CORG, CCOMPTE, NOBAIL, MAX(TMP.CMOTIF) AS CD_TYPE_CAUTION, MAX(P.LB_TYPE_CAUTION) AS LB_TYPE_CAUTION,
       MIN(DDVAL) AS DT_DEBUT_CAUTION, MAX(DFVAL) AS DT_FIN_CAUTION,
       /*SUM(DATEDIFF(month, DDVAL, DATEADD(day, 1, DFVAL))) AS DUREE_CAUTION_MOIS,*/ SUM(MONTANT) AS MT_CAUTION,
       MAX(CASE WHEN TMP.LREVIS <> 0 THEN 'O' ELSE 'N' END) AS IND_REVISABLE
FROM (SELECT CORG, CCOMPTE, NOBAIL, CMOTIF, DDVAL, DFVAL, MONTANT, LREVIS,
             RANK() OVER (PARTITION BY CORG, CCOMPTE, NOBAIL, CMOTIF
                          ORDER BY CORG, CCOMPTE, NOBAIL, CMOTIF DESC, PK_LCAUTION) AS RK
      FROM ESTIA_LCAUTION AS LCAUTION) AS TMP
     LEFT JOIN P_TYPE_CAUTION AS P
          ON P.CD_TYPE_CAUTION = TMP.CMOTIF
WHERE RK = 1
GROUP BY CORG, CCOMPTE, NOBAIL

PRINT 'WRK_LOCATION_LCAUTION: TABLE DE TRAVAIL SUR LES CAUTIONS DES BAUX'


--####################################################################################################################
--################################################ WRK_LOCAL_HQLOCAL #################################################
--####################################################################################################################

--WRK_LOCAL_HQLOCAL: TABLE DE TRAVAIL SUR LES VLM AU NIVEAU DES LOTS
TRUNCATE TABLE WRK_LOCAL_HQLOCAL
INSERT INTO WRK_LOCAL_HQLOCAL (CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, MT_LOYER_MARCHE, MT_CHARGES_MARCHE)
SELECT HQLOCAL.CORG, HQLOCAL.CAGENCE, HQLOCAL.CGROUPE, HQLOCAL.CIMMEUB, HQLOCAL.CLOCAL,
       SUM(CASE WHEN PSRE.CD_REG_ELTFAC = 'LO' THEN HQLOCAL.NB ELSE 0 END) AS MT_LOYER_MARCHE,
       SUM(CASE WHEN PSRE.CD_REG_ELTFAC = 'CH' THEN HQLOCAL.NB ELSE 0 END) AS MT_CHARGES_MARCHE
FROM ESTIA_HQLOCAL AS HQLOCAL
     INNER JOIN P_RUBRIQUE AS PR
           ON PR.CD_RUBRIQUE = HQLOCAL.CRUB
     INNER JOIN P_SOUS_REG_ELTFAC AS PSRE
           ON PSRE.CD_SOUS_REG_ELTFAC = PR.CD_SOUS_REG_ELTFAC
           AND PSRE.CD_REG_ELTFAC IN ('LO', 'CH')
WHERE @DT BETWEEN ISNULL(HQLOCAL.DDEB, '1900/01/01') AND ISNULL(HQLOCAL.DFIN, '2999/01/01')
GROUP BY HQLOCAL.CORG, HQLOCAL.CAGENCE, HQLOCAL.CGROUPE, HQLOCAL.CIMMEUB, HQLOCAL.CLOCAL

PRINT 'WRK_LOCAL_HQLOCAL: TABLE DE TRAVAIL SUR LES VLM AU NIVEAU DES LOTS'


--####################################################################################################################
--############################################### WRK_GROUPE_CRITLIB #################################################
--####################################################################################################################

--WRK_GROUPE_CRITLIB: TABLE DE TRAVAIL SUR LES VLM AU NIVEAU DES LOTS
TRUNCATE TABLE WRK_GROUPE_CRITLIB
INSERT INTO WRK_GROUPE_CRITLIB (CORG, CAGENCE, CGROUPE, CD_RESPONSABLE_PATRIMOINE, LB_RESPONSABLE_PATRIMOINE, CD_RESPONSABLE_TRAVAUX, LB_RESPONSABLE_TRAVAUX, CD_RESPONSABLE_GROUPE, LB_RESPONSABLE_GROUPE, CD_COMPTABLE_IMMEUBLE, LB_COMPTABLE_IMMEUBLE, CD_CONTROLEUR_GESTION, LB_CONTROLEUR_GESTION, CD_ASSET_MANAGER_CLIENT, LB_ASSET_MANAGER_CLIENT, CD_ETAT_GESTION, LB_ETAT_GESTION, CD_TYPOLOGIE_ACTIF, LB_TYPOLOGIE_ACTIF, CD_GERANCE_COPRO, LB_GERANCE_COPRO, CD_PROPRIETAIRE, LB_PROPRIETAIRE, CD_TYPE_MANDAT_AXA, LB_TYPE_MANDAT_AXA, CD_GROUPE_PROPRIETAIRE, LB_GROUPE_PROPRIETAIRE, CD_LOCALISATION, LB_LOCALISATION)
SELECT CORG, CAGENCE, CGROUPE,
       MAX(CASE WHEN CLCRIT = 'AF1' THEN CCRIT END) AS CD_RESPONSABLE_PATRIMOINE,
       MAX(CASE WHEN CLCRIT = 'AF1' THEN LCRIT END) AS LB_RESPONSABLE_PATRIMOINE,
       MAX(CASE WHEN CLCRIT = 'AF2' THEN CCRIT END) AS CD_RESPONSABLE_TRAVAUX,
       MAX(CASE WHEN CLCRIT = 'AF2' THEN LCRIT END) AS LB_RESPONSABLE_TRAVAUX,
       MAX(CASE WHEN CLCRIT = 'AF3' THEN CCRIT END) AS CD_RESPONSABLE_GROUPE,
       MAX(CASE WHEN CLCRIT = 'AF3' THEN LCRIT END) AS LB_RESPONSABLE_GROUPE,

       MAX(CASE WHEN CLCRIT = 'AF4' THEN CCRIT END) AS CD_COMPTABLE_IMMEUBLE,
       MAX(CASE WHEN CLCRIT = 'AF4' THEN LCRIT END) AS LB_COMPTABLE_IMMEUBLE,
       MAX(CASE WHEN CLCRIT = 'AF5' THEN CCRIT END) AS CD_CONTROLEUR_GESTION,
       MAX(CASE WHEN CLCRIT = 'AF5' THEN LCRIT END) AS LB_CONTROLEUR_GESTION,
       MAX(CASE WHEN CLCRIT = 'AF6' THEN CCRIT END) AS CD_ASSET_MANAGER_CLIENT,
       MAX(CASE WHEN CLCRIT = 'AF6' THEN LCRIT END) AS LB_ASSET_MANAGER_CLIENT,

       MAX(CASE WHEN CLCRIT = 'TY1' THEN CCRIT END) AS CD_ETAT_GESTION,
       MAX(CASE WHEN CLCRIT = 'TY1' THEN LCRIT END) AS LB_ETAT_GESTION,
       MAX(CASE WHEN CLCRIT = 'TY2' THEN CCRIT END) AS CD_TYPOLOGIE_ACTIF,
       MAX(CASE WHEN CLCRIT = 'TY2' THEN LCRIT END) AS LB_TYPOLOGIE_ACTIF,
       MAX(CASE WHEN CLCRIT = 'TY3' THEN CCRIT END) AS CD_GERANCE_COPRO,
       MAX(CASE WHEN CLCRIT = 'TY3' THEN LCRIT END) AS LB_GERANCE_COPRO,
       MAX(CASE WHEN CLCRIT = 'TY4' THEN CCRIT END) AS CD_PROPRIETAIRE,
       MAX(CASE WHEN CLCRIT = 'TY4' THEN LCRIT END) AS LB_PROPRIETAIRE,
       MAX(CASE WHEN CLCRIT = 'TY5' THEN CCRIT END) AS CD_TYPE_MANDAT_AXA,
       MAX(CASE WHEN CLCRIT = 'TY5' THEN LCRIT END) AS LB_TYPE_MANDAT_AXA,
       MAX(CASE WHEN CLCRIT = 'TY6' THEN CCRIT END) AS CD_GROUPE_PROPRIETAIRE,
       MAX(CASE WHEN CLCRIT = 'TY6' THEN LCRIT END) AS LB_GROUPE_PROPRIETAIRE,
       MAX(CASE WHEN CLCRIT = 'TY7' THEN CCRIT END) AS CD_LOCALISATION,
       MAX(CASE WHEN CLCRIT = 'TY7' THEN LCRIT END) AS LB_LOCALISATION
FROM (SELECT LEFT(CRITLIB.CLEFICH, 2) AS CORG,
             SUBSTRING(CRITLIB.CLEFICH, 3, 2) AS CAGENCE,
             CONVERT(INT, RIGHT(CRITLIB.CLEFICH, 4)) AS CGROUPE,
             CRITLIB.CLCRIT, CRITLIB.CCRIT, CRIT.LCRIT
      FROM ESTIA_CRITLIB AS CRITLIB
           LEFT JOIN ESTIA_CRIT AS CRIT
                ON CRIT.CLCRIT = CRITLIB.CLCRIT
                AND CRIT.CCRIT = CRITLIB.CCRIT
                AND CRIT.NOFICH = 'local'
      WHERE CRITLIB.NOFICH = 'GROUPE'
      AND LEN(CRITLIB.CLEFICH) = 8
      AND ISNUMERIC(RIGHT(CRITLIB.CLEFICH, 4)) <> 0) AS TMP
GROUP BY CORG, CAGENCE, CGROUPE

PRINT 'WRK_GROUPE_CRITLIB: TABLE DE TRAVAIL SUR LES VLM AU NIVEAU DES LOTS'


--####################################################################################################################
--############################################### WRK_LOCATION_HLOYCA ################################################
--####################################################################################################################

--WRK_LOCATION_HLOYCA: TABLE DE TRAVAIL DES CHIFFRES D'AFFAIRE SUR LES BAUX
TRUNCATE TABLE WRK_LOCATION_HLOYCA
INSERT INTO WRK_LOCATION_HLOYCA (CORG, CCOMPTE, NOBAIL, ANNEE_CA, MT_CA)
SELECT CORG, CCOMPTE, NOBAIL,
       MAX(YEAR(DDEB)) AS ANNEE_CA,
       SUM(MTFINAL) AS MT_CA
FROM (SELECT LOCATION.CORG, LOCATION.CCOMPTE, LOCATION.NOBAIL,
             LOCATION.CAGENCE, LOCATION.CGROUPE, LOCATION.CIMMEUB, LOCATION.CLOCAL,
             HLOYCA.DDEB, HLOYCA.MTFINAL,
             RANK() OVER (PARTITION BY LOCATION.CORG, LOCATION.CCOMPTE, LOCATION.NOBAIL
                          ORDER BY LOCATION.CORG, LOCATION.CCOMPTE, LOCATION.NOBAIL, YEAR(HLOYCA.DDEB) DESC) AS RK_ANNEE,
             RANK() OVER (PARTITION BY LOCATION.CORG, LOCATION.CAGENCE, LOCATION.CGROUPE, LOCATION.CIMMEUB, LOCATION.CLOCAL
                          ORDER BY LOCATION.CORG, LOCATION.CAGENCE, LOCATION.CGROUPE, LOCATION.CIMMEUB, LOCATION.CLOCAL, HLOYCA.DDEB DESC, HLOYCA.PK_HLOYCA DESC) AS RK_OCC
      FROM ESTIA_HLOYCA AS HLOYCA
           INNER JOIN ESTIA_LOCATION AS LOCATION
                 ON LOCATION.CORG = HLOYCA.CORG
                 AND LOCATION.CAGENCE = HLOYCA.CAGENCE
                 AND LOCATION.CGROUPE = HLOYCA.CGROUPE
                 AND LOCATION.CIMMEUB = HLOYCA.CIMMEUB
                 AND LOCATION.CLOCAL = HLOYCA.CLOCAL
                 AND LOCATION.OCC = HLOYCA.OCC) AS TMP
WHERE RK_ANNEE = 1
AND RK_OCC = 1           
GROUP BY CORG, CCOMPTE, NOBAIL

PRINT 'WRK_LOCATION_HLOYCA: TABLE DE TRAVAIL DES CHIFFRES D''AFFAIRE SUR LES BAUX'


--####################################################################################################################
--################################################ WRK_MANGES_MANTVA #################################################
--####################################################################################################################

--WRK_MANGES_MANTVA: TABLE DE TRAVAIL SUR LA TVA AU NIVEAU DES MANDATS
TRUNCATE TABLE WRK_MANGES_MANTVA
INSERT INTO WRK_MANGES_MANTVA (CMANDAT, TAUXD)
SELECT CMANDAT, TAUXD
FROM (SELECT CMANDAT, TAUXD,
             RANK() OVER (PARTITION BY CMANDAT
                          ORDER BY CMANDAT, CASE WHEN @DT > DDEB THEN 1 ELSE -1 END ASC, DDEB DESC, DFIN) AS RK
      FROM ESTIA_MANTVA) AS TMP
WHERE RK = 1

PRINT 'WRK_MANGES_MANTVA: TABLE DE TRAVAIL SUR LA TVA AU NIVEAU DES MANDATS'


--####################################################################################################################
--################################################ WRK_GROUPE_LOCATION #################################################
--####################################################################################################################

--WRK_GROUPE_LOCATION: TABLE DE TRAVAIL SUR LES BAUX AU NIVEAU DES IMMEUBLES
TRUNCATE TABLE WRK_GROUPE_LOCATION
INSERT INTO WRK_GROUPE_LOCATION (CORG, CAGENCE, CGROUPE, NB_BAUX_ACTIFS)
SELECT CORG, CAGENCE, CGROUPE, COUNT(*) AS NB_BAUX_ACTIFS
FROM ESTIA_LOCATION
WHERE @DT BETWEEN ISNULL(DATENTQUIT, '1900/01/01') AND ISNULL(DATSORQUIT, '2999/01/01')
AND NOLOCAT = CONTLOC
GROUP BY CORG, CAGENCE, CGROUPE

PRINT 'WRK_GROUPE_LOCATION: TABLE DE TRAVAIL SUR LES BAUX AU NIVEAU DES IMMEUBLES'


--####################################################################################################################
--################################################### WRK_DPROCTX ####################################################
--####################################################################################################################

--WRK_DPROCTX: TABLE DE TRAVAIL SUR LES BAUX AU NIVEAU DES IMMEUBLES
TRUNCATE TABLE WRK_DPROCTX
INSERT INTO WRK_DPROCTX (CORG, CCOMPTE, NOBAIL, IND_CONTENTIEUX)
SELECT DISTINCT CORG, CCOMPTE, NOBAIL, 'O' AS IND_CONTENTIEUX
FROM ESTIA_DPROCTX
WHERE CTYPROC = 'CTX'
AND @DT >= ISNULL(DATCREAT, '1900/01/01')
AND @DT <= ISNULL(DATCLO, '2999/01/01')
AND CORG IS NOT NULL
AND CCOMPTE IS NOT NULL
AND NOBAIL > 0

PRINT 'WRK_DPROCTX: TABLE DE TRAVAIL SUR LES BAUX AU NIVEAU DES IMMEUBLES'


--####################################################################################################################
--############################################## WRK_PRO_COMPTABILITE ################################################
--####################################################################################################################

--WRK_PRO_COMPTABILITE: TABLE DE TRAVAIL SUR LE TYPE DE COMPTABILITE DES PROPRIETAIRES
TRUNCATE TABLE WRK_PRO_COMPTABILITE
INSERT INTO WRK_PRO_COMPTABILITE (CTYPTIERS, CTIERS, CTYPROPR, LTYPROPR)
SELECT T.CTYPTIERS, T.CTIERS, T.CTYPROPR, ORG.LORG AS LTYPROPR
FROM (SELECT CTYPTIERS, CTIERS, CTYPROPR,
             RANK() OVER (PARTITION BY CTYPTIERS, CTIERS
                          ORDER BY CTYPTIERS, CTIERS, CASE WHEN @DT >= ISNULL(DDEB,'1900/01/01') THEN 1 ELSE -1 END DESC, ISNULL(DDEB,'1900/01/01') DESC, TYPROPR_ID DESC) AS RK
      FROM ESTIA_TYPROPR AS TYPOPR) AS T
     LEFT JOIN ESTIA_ORG AS ORG
          ON ORG.CORG = T.CTYPROPR
WHERE RK = 1

PRINT 'WRK_PRO_COMPTABILITE: TABLE DE TRAVAIL SUR LE TYPE DE COMPTABILITE DES PROPRIETAIRES'


--####################################################################################################################
--############################################### WRK_LOCATION_LOCAL #################################################
--####################################################################################################################

--WRK_LOCATION_LOCAL: TABLE DE TRAVAIL SUR LES LOTS ASSOCIES AUX BAUX
TRUNCATE TABLE WRK_LOCATION_LOCAL
INSERT INTO WRK_LOCATION_LOCAL (CORG, CCOMPTE, NOBAIL, DT_PREMIERE_ASSOCIATION_LOT, DT_FIN_ASSOCIATION_LOT)
SELECT CORG, CCOMPTE, NOBAIL,
       MIN(DATENTQUIT) AS DT_PREMIERE_ASSOCIATION_LOT,
       MAX(DATSORQUIT) AS DT_FIN_ASSOCIATION_LOT
FROM ESTIA_LOCATION
GROUP BY CORG, CCOMPTE, NOBAIL

PRINT 'WRK_LOCATION_LOCAL: TABLE DE TRAVAIL SUR LES LOTS ASSOCIES AUX BAUX'


--####################################################################################################################
--############################################### WRK_MANGES_MANPROP #################################################
--####################################################################################################################

--WRK_MANGES_MANPROP: TABLE DE TRAVAIL SUR LES PROPRIETAIRES RATTACHES AUX MANDATS
TRUNCATE TABLE WRK_MANGES_MANPROP
INSERT INTO WRK_MANGES_MANPROP (CMANDAT, PARTREP)
SELECT CMANDAT, SUM(PARTREP) AS PARTREP
FROM ESTIA_MANPROP AS MANPROP
WHERE CMANDAT IS NOT NULL
GROUP BY CMANDAT

PRINT 'WRK_MANGES_MANPROP: TABLE DE TRAVAIL SUR LES PROPRIETAIRES RATTACHES AUX MANDATS'


--####################################################################################################################
--################################################### WRK_HREVIS #####################################################
--####################################################################################################################

--WRK_HREVIS: TABLE DE TRAVAIL SUR L'HISTORIQUE DE REVISION
TRUNCATE TABLE WRK_HREVIS

--AJOUT DES RUBRIQUES REVISABLES AYANT UN HISTORIQUE DE REVISION
INSERT INTO WRK_HREVIS (CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, IND_HREVIS, CD_INDICE_REVISION, DT_REVISION_PRECEDENTE, MT_INITIAL, VAL_INDICE_INITIAL, VAL_INDICE_PRECEDENT, VAL_INDICE_ACTUEL, CD_INDICE_INITIAL, CD_INDICE_ACTUEL)
SELECT TMP.CORG, TMP.CAGENCE, TMP.CGROUPE, TMP.CIMMEUB, TMP.CLOCAL, TMP.OCC, CRUB, CSTE, 'O' AS IND_HREVIS,
       MAX(CASE WHEN RK_INV = 1 THEN TMP.CNUMI END) AS CD_INDICE_REVISION,
       MAX(CASE WHEN RK_INV = 1 THEN TMP.DREVIS END) AS DT_REVISION_PRECEDENTE,
       MIN(CASE WHEN RK = 1 THEN ANCNB END) AS MT_INITIAL,
       MIN(CASE WHEN RK = 1 THEN INDANC END) AS VAL_INDICE_INITIAL,
       MAX(CASE WHEN RK_INV = 1 THEN INDANC END) AS VAL_INDICE_PRECEDENT,
       MAX(CASE WHEN RK_INV = 1 THEN VALPOINT END) AS VAL_INDICE_ACTUEL,
       ISNULL(LOCATION.INDREF, MIN(CASE WHEN RK = 1 THEN TMP.TRIMIND END)) AS CD_INDICE_INITIAL,
       MAX(CASE WHEN RK_INV = 1 THEN ANCTRIMIND END) AS CD_INDICE_ACTUEL
      
FROM (SELECT PK_HREVI, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, CNUMI, DREVIS, NB, ANCNB, INDANC, VALPOINT, TRIMIND, ANCTRIMIND,
                     RANK() OVER (PARTITION BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE
                                               ORDER BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, DREVIS, DDEB, PK_HREVI) AS RK,
                     RANK() OVER (PARTITION BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE
                                               ORDER BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, DREVIS DESC, DDEB DESC, PK_HREVI DESC) AS RK_INV
      FROM ESTIA_HREVI
      WHERE CORG IS NOT NULL
      AND CAGENCE IS NOT NULL
      AND CGROUPE IS NOT NULL
      AND CIMMEUB IS NOT NULL
      AND CLOCAL IS NOT NULL
      AND OCC IS NOT NULL
      AND CSTE IS NOT NULL) AS TMP

-- debut modif MNA 20181002
     INNER JOIN ESTIA_LOCATION AS LOCATION
           ON LOCATION.CORG = TMP.CORG
           AND LOCATION.CAGENCE = TMP.CAGENCE
           AND LOCATION.CGROUPE = TMP.CGROUPE
           AND LOCATION.CIMMEUB = TMP.CIMMEUB
           AND LOCATION.CLOCAL = TMP.CLOCAL
           AND LOCATION.OCC = TMP.OCC
-- fin modif MNA 20181002

WHERE (RK = 1 OR RK_INV = 1)

GROUP BY TMP.CORG, TMP.CAGENCE, TMP.CGROUPE, TMP.CIMMEUB, TMP.CLOCAL, TMP.OCC, TMP.CRUB, TMP.CSTE, LOCATION.INDREF

PRINT 'WRK_HREVIS: TABLE DE TRAVAIL SUR L''HISTORIQUE DE REVISION'
-- Modif MMNA 120118 : cd indice revision egal a N/A si cnumi is null

--AJOUT DES RUBRIQUES REVISABLES N'AYANT PAS D'HISTORIQUE DE REVISION
INSERT INTO WRK_HREVIS (CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, IND_HREVIS, CD_INDICE_REVISION, DT_REVISION_PRECEDENTE, CD_INDICE_INITIAL, CD_INDICE_ACTUEL)
SELECT CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, CSTE, IND_HREVIS, ISNULL(CD_INDICE_REVISION, 'N/A') AS CD_INDICE_REVISION, DT_REVISION_PRECEDENTE, CD_INDICE_INITIAL, CD_INDICE_ACTUEL
FROM (SELECT L.CORG, L.CAGENCE, L.CGROUPE, L.CIMMEUB, L.CLOCAL, L.OCC, H.CRUB, H.CSTE, 'N' AS IND_HREVIS,
             L.CNUMI AS CD_INDICE_REVISION, L.DATEFFET AS DT_REVISION_PRECEDENTE,
             /*L.INDPREC*/L.INDREF  AS CD_INDICE_INITIAL, L.INDPREC AS CD_INDICE_ACTUEL,
             RANK() OVER (PARTITION BY L.CORG, L.CAGENCE, L.CGROUPE, L.CIMMEUB, L.CLOCAL, L.OCC, H.CRUB, H.CSTE
                          ORDER BY L.CORG, L.CAGENCE, L.CGROUPE, L.CIMMEUB, L.CLOCAL, L.OCC, H.CRUB, H.CSTE, H.PK_HQLOCAT) AS RK
      FROM ESTIA_LOCATION AS L
           INNER JOIN ESTIA_HQLOCAT AS H
                ON H.CORG = L.CORG
                AND H.CAGENCE = L.CAGENCE
                AND H.CGROUPE = L.CGROUPE
                AND H.CIMMEUB = L.CIMMEUB
                AND H.CLOCAL = L.CLOCAL
                AND H.OCC = L.OCC
           LEFT JOIN WRK_HREVIS AS W
                ON W.CORG = H.CORG
                AND W.CAGENCE = H.CAGENCE
                AND W.CGROUPE = H.CGROUPE
                AND W.CIMMEUB = H.CIMMEUB
                AND W.CLOCAL = H.CLOCAL
                AND W.OCC = H.OCC
                AND W.CSTE = H.CSTE
      WHERE W.CORG IS NULL
      AND H.LREVIS <> 0) AS TMP
WHERE RK = 1


--MISE A JOUR DES VALEURS DES INDICES
UPDATE WRK_HREVIS
SET DT_INDICE_INITIAL = II.DT,
DT_INDICE_ACTUEL = IA.DT,
VAL_INDICE_INITIAL = CASE WHEN IND_HREVIS = 'N' THEN II.VAL ELSE VAL_INDICE_INITIAL END,
VAL_INDICE_ACTUEL = CASE WHEN IND_HREVIS = 'N' THEN IA.VAL ELSE VAL_INDICE_ACTUEL END
FROM WRK_HREVIS AS W
     LEFT JOIN ESTIA_INDICE AS II
          ON II.CNUMI = W.CD_INDICE_REVISION
          AND II.MOIS * 10000 + II.ANNEE = W.CD_INDICE_INITIAL
     LEFT JOIN ESTIA_INDICE AS IA
          ON IA.CNUMI = W.CD_INDICE_REVISION
          AND IA.MOIS * 10000 + IA.ANNEE = W.CD_INDICE_ACTUEL

PRINT 'WRK_HREVIS: TABLE DE TRAVAIL SUR L''HISTORIQUE DE REVISION'


--####################################################################################################################
--################################################## WRK_BAIL_RUB ####################################################
--####################################################################################################################

--WRK_BAIL_RUB: TABLE DE TRAVAIL SUR RUBRIQUES UTILISEES SUR CHAQUE BAIL DANS LES ELEMENTS PERMANENTS
TRUNCATE TABLE WRK_BAIL_RUB
INSERT INTO WRK_BAIL_RUB (CORG, CCOMPTE, NOBAIL, CRUB)
SELECT DISTINCT LOCATION.CORG, LOCATION.CCOMPTE, LOCATION.NOBAIL, HQLOCAT.CRUB
FROM ESTIA_LOCATION AS LOCATION
     INNER JOIN ESTIA_HQLOCAT AS HQLOCAT
           ON HQLOCAT.CORG = LOCATION.CORG
           AND HQLOCAT.CAGENCE = LOCATION.CAGENCE
           AND HQLOCAT.CGROUPE = LOCATION.CGROUPE
           AND HQLOCAT.CIMMEUB = LOCATION.CIMMEUB
           AND HQLOCAT.CLOCAL = LOCATION.CLOCAL
           AND HQLOCAT.OCC = LOCATION.OCC

PRINT 'WRK_BAIL_RUB: TABLE DE TRAVAIL SUR RUBRIQUES UTILISEES SUR CHAQUE BAIL DANS LES ELEMENTS PERMANENTS'


--####################################################################################################################
--################################################# WRK_BAIL_ETAGES ##################################################
--####################################################################################################################

--WRK_BAIL_ETAGES: TABLE DE TRAVAIL DES ETAGES DES BAUX
TRUNCATE TABLE WRK_BAIL_ETAGES


DECLARE @PK_BAIL INT, @OLD_PK_BAIL INT, @ETAGE INT, @ETAGES VARCHAR(8000)
SET @ETAGES = ''
SET @PK_BAIL = 0
SET @OLD_PK_BAIL = -1


DECLARE CUR_ETG CURSOR FOR
SELECT DISTINCT LOCATION.FK_BAIL AS PK_BAIL, PLOCAL.ETAGE
FROM ESTIA_LOCATION AS LOCATION
     INNER JOIN ESTIA_PLOCAL AS PLOCAL
           ON PLOCAL.CORG = LOCATION.CORG
           AND PLOCAL.CAGENCE = LOCATION.CAGENCE
           AND PLOCAL.CGROUPE = LOCATION.CGROUPE
           AND PLOCAL.CIMMEUB = LOCATION.CIMMEUB
           AND PLOCAL.CPLOCAL = LOCATION.CLOCAL
WHERE LEN(RTRIM(PLOCAL.ETAGE)) > 0
AND LOCATION.FK_BAIL IS NOT NULL
AND PLOCAL.ETAGE < 90
ORDER BY LOCATION.FK_BAIL, PLOCAL.ETAGE

OPEN CUR_ETG

FETCH NEXT FROM CUR_ETG INTO @PK_BAIL, @ETAGE


WHILE @@FETCH_STATUS = 0   
	BEGIN
	IF @OLD_PK_BAIL <> @PK_BAIL
		BEGIN
		INSERT INTO WRK_BAIL_ETAGES (PK_BAIL, ETAGES) VALUES (@OLD_PK_BAIL, CASE WHEN LEN(@ETAGES) > 40 THEN LEFT(@ETAGES,37) + '...' ELSE @ETAGES END)
		
		SET @ETAGES = ''
		END

	SET @ETAGES = @ETAGES
	              + CASE WHEN LEN(@ETAGES) > 0 THEN ' / ' ELSE '' END
	              + CASE WHEN @ETAGE = 0 THEN 'RDC'
	                     WHEN @ETAGE < 0 THEN 'R' + CONVERT(VARCHAR(50), @ETAGE)
	                     ELSE 'R+' + CONVERT(VARCHAR(50), @ETAGE)
                    END

	SET @OLD_PK_BAIL = @PK_BAIL

	FETCH NEXT FROM CUR_ETG INTO @PK_BAIL, @ETAGE
	END   

CLOSE CUR_ETG   
DEALLOCATE CUR_ETG 

IF NOT EXISTS(SELECT * FROM WRK_BAIL_ETAGES WHERE PK_BAIL = @PK_BAIL)
	BEGIN
	INSERT INTO WRK_BAIL_ETAGES (PK_BAIL, ETAGES) VALUES (@PK_BAIL, CASE WHEN LEN(@ETAGES) > 40 THEN LEFT(@ETAGES,37) + '...' ELSE @ETAGES END)
	END


PRINT 'WRK_BAIL_ETAGES: TABLE DE TRAVAIL DES ETAGES DES BAUX'


--####################################################################################################################
--################################################### WRK_BAIL_DG ####################################################
--####################################################################################################################

--WRK_BAIL_DG: TABLE DE TRAVAIL SUR LES DG AU NIVEAU DES BAUX (SUR LA COMPTABILITE)
TRUNCATE TABLE WRK_BAIL_DG
INSERT INTO WRK_BAIL_DG (PK_BAIL, CCOMPTE, NOBAIL, MT_DG_PRINCIPAL, MT_DG_ANNEXE)
SELECT CPTGLOB.FK_BAIL AS PK_BAIL, CPTGLOB.CCOMPTE, CPTGLOB.NOBAIL,
       SUM(CASE WHEN PR.IND_DG_PRINCIPAL = 'O' THEN CASE WHEN CPTGLOB.SENS = 'C' THEN CAST(REPLACE(CPTGLOB.MONTANT, ',','.') AS NUMERIC(18,2)) ELSE CAST(REPLACE(CPTGLOB.MONTANT, ',','.') AS NUMERIC(18,2))*-1 END ELSE 0 END) AS MT_DG_PRINCIPAL,
       SUM(CASE WHEN PR.IND_DG_ANNEXE = 'O' THEN CASE WHEN CPTGLOB.SENS = 'C' THEN CAST(REPLACE(CPTGLOB.MONTANT, ',','.') AS NUMERIC(18,2)) ELSE CAST(REPLACE(CPTGLOB.MONTANT, ',','.') AS NUMERIC(18,2))*-1 END ELSE 0 END) AS MT_DG_ANNEXE
FROM ESTIA_CPTGLOB AS CPTGLOB
     INNER JOIN P_RUBRIQUE AS PR
           ON PR.CD_RUBRIQUE = CPTGLOB.CRUB
	 INNER JOIN ESTIA_LOCATION LOCATION
	 ON LOCATION.PK_LOCATION = CPTGLOB.FK_BAIL
WHERE CPTGLOB.TYPCPTA = 'LD'
AND (PR.IND_DG_PRINCIPAL = 'O' OR PR.IND_DG_ANNEXE = 'O')
AND CPTGLOB.DATEC <= @DT--GETDATE()
AND LOCATION.CORG = '11'
AND CPTGLOB.CORG = '11'
GROUP BY CPTGLOB.FK_BAIL, CPTGLOB.CCOMPTE, CPTGLOB.NOBAIL

PRINT 'WRK_BAIL_DG: TABLE DE TRAVAIL SUR LES DG AU NIVEAU DES BAUX (SUR LA COMPTABILITE)'


--####################################################################################################################
--############################################### WRK_LOCATION_NEGOCH ################################################
--####################################################################################################################

--WRK_LOCATION_NEGOCH: TABLE DE TRAVAIL SUR LES NEGOCIATIONS DE CHARGES AU NIVEAU DES BAUX
TRUNCATE TABLE WRK_LOCATION_NEGOCH
INSERT INTO WRK_LOCATION_NEGOCH (PK_BAIL, CORG, CCOMPTE, NOBAIL, PC_RECUP_TF, PC_RECUP_AS, PC_RECUP_TOM)
SELECT FK_BAIL AS PK_BAIL, CORG, CCOMPTE, NOBAIL,
       CONVERT(NUMERIC(9,2),  MAX(CASE WHEN CMETH = '%' AND ((CCRITDP = 8006 AND CSCRITDP = 159) OR (CCRITDP = 9034 AND CSCRITDP = 990)) THEN MONTANT END)  ) AS PC_RECUP_TF,
       CONVERT(NUMERIC(9,2),  MAX(CASE WHEN CMETH = '%' AND CSCRITDP = 400 THEN MONTANT END)  ) AS PC_RECUP_AS,
       CONVERT(NUMERIC(9,2),  MAX(CASE WHEN CMETH = '%' AND ((CCRITDP = 1026 AND CSCRITDP = 160) OR (CCRITDP = 8008 AND CSCRITDP = 159)) THEN MONTANT END)  ) AS PC_RECUP_TOM
FROM ESTIA_NEGOCH
WHERE CORG = '11'
AND FK_BAIL IS NOT NULL
GROUP BY FK_BAIL, CORG, CCOMPTE, NOBAIL
--INSERT INTO WRK_LOCATION_NEGOCH (PK_BAIL, CORG, CCOMPTE, NOBAIL, PC_RECUP_TF, PC_RECUP_HO, PC_RECUP_TB, PC_RECUP_AS, PC_RECUP_605, PC_RECUP_606, IND_GROS_TRAVAUX)
--SELECT FK_BAIL AS PK_BAIL, CORG, CCOMPTE, NOBAIL,
--       CONVERT(NUMERIC(9,2),  MAX(CASE WHEN CMETH = '%' AND CSCRITDP = 18 THEN MONTANT END)  ) AS PC_RECUP_TF,
--       CONVERT(NUMERIC(9,2),  MAX(CASE WHEN CMETH = '%' AND CSCRITDP = 90 THEN MONTANT END)  ) AS PC_RECUP_HO,
--       CONVERT(NUMERIC(9,2),  MAX(CASE WHEN CMETH = '%' AND CSCRITDP = 19 THEN MONTANT END)  ) AS PC_RECUP_TB,
--       CONVERT(NUMERIC(9,2),  MAX(CASE WHEN CMETH = '%' AND CSCRITDP = 80 THEN MONTANT END)  ) AS PC_RECUP_AS,
--       CONVERT(NUMERIC(9,2),  MAX(CASE WHEN CMETH = '%' AND CSCRITDP = 605 THEN MONTANT END)  ) AS PC_RECUP_605,
--       CONVERT(NUMERIC(9,2),  MAX(CASE WHEN CMETH = '%' AND CSCRITDP = 606 THEN MONTANT END)  ) AS PC_RECUP_606,
--       CASE WHEN MAX(CASE WHEN CSCRITDP = 606 THEN MONTANT ELSE 0 END) > 0 THEN 'O' ELSE 'N' END AS IND_GROS_TRAVAUX
--FROM ESTIA_NEGOCH
--WHERE FK_BAIL IS NOT NULL
--GROUP BY FK_BAIL, CORG, CCOMPTE, NOBAIL

PRINT 'WRK_LOCATION_NEGOCH: TABLE DE TRAVAIL SUR LES NEGOCIATIONS DE CHARGES AU NIVEAU DES BAUX'


--####################################################################################################################
--################################################# WRK_INTBT_ECRIB ##################################################
--####################################################################################################################

--WRK_INTBT_ECRIB: TABLE DE TRAVAIL SUR LES MONTANTS AU NIVEAU DES BONS DE TRAVAUX
/*TRUNCATE TABLE WRK_INTBT_ECRIB

INSERT INTO WRK_INTBT_ECRIB (CORG, NOINTBT, CSTE1, MT_ENGAGEMENT_INITIAL_HT, MT_ENGAGEMENT_INITIAL_TVA, MT_ENGAGEMENT_INITIAL_TTC, MT_ENGAGEMENT_RESTANT_HT, MT_ENGAGEMENT_RESTANT_TVA, MT_ENGAGEMENT_RESTANT_TTC, MT_REALISE_HT, MT_REALISE_TVA, MT_REALISE_TTC, DT_REALISE)

SELECT INTBT.CORG, INTBT.NOINTBT, INTBT.CSTE1,
       SUM(CASE WHEN ECRIB.CSTE = 'EG' AND ISNULL(LEN(RTRIM(ECRIB.CJOURNAL)),0) = 0 THEN ECRIB.MTHT ELSE 0 END) AS MT_ENGAGEMENT_INITIAL_HT,
       SUM(CASE WHEN ECRIB.CSTE = 'EG' AND ISNULL(LEN(RTRIM(ECRIB.CJOURNAL)),0) = 0 THEN ISNULL(ECRIB.MTTC,0) - ISNULL(ECRIB.MTHT,0) ELSE 0 END) AS MT_ENGAGEMENT_INITIAL_TVA,
       SUM(CASE WHEN ECRIB.CSTE = 'EG' AND ISNULL(LEN(RTRIM(ECRIB.CJOURNAL)),0) = 0 THEN ECRIB.MTTC ELSE 0 END) AS MT_ENGAGEMENT_INITIAL_TTC,

       SUM(CASE WHEN ECRIB.CSTE = 'EG' THEN (CASE WHEN SENS = 'D' THEN ECRIB.MTHT ELSE ECRIB.MTHT *(-1) END)ELSE 0 END) AS MT_ENGAGEMENT_RESTANT_HT,
       SUM(CASE WHEN ECRIB.CSTE = 'EG' THEN (CASE WHEN SENS = 'D' THEN (ISNULL(ECRIB.MTTC,0) - ISNULL(ECRIB.MTHT,0)) ELSE (ISNULL(ECRIB.MTTC,0) - ISNULL(ECRIB.MTHT,0))*(-1) END) ELSE 0 END) AS MT_ENGAGEMENT_RESTANT_TVA,
       SUM(CASE WHEN ECRIB.CSTE = 'EG' THEN (CASE WHEN SENS = 'D' THEN ECRIB.MTTC ELSE ECRIB.MTTC *(-1) END) ELSE 0 END) AS MT_ENGAGEMENT_RESTANT_TTC,

       SUM(CASE WHEN ECRIB.CSTE = 'EG' AND ISNULL(LEN(RTRIM(ECRIB.CJOURNAL)),0) <> 0 THEN (CASE WHEN SENS = 'C' THEN ECRIB.MTHT ELSE ECRIB.MTHT *(-1) END)ELSE 0 END)  AS MT_REALISE_HT,
       SUM(CASE WHEN ECRIB.CSTE = 'EG' AND ISNULL(LEN(RTRIM(ECRIB.CJOURNAL)),0) <> 0 THEN (CASE WHEN SENS = 'C' THEN (ISNULL(ECRIB.MTTC,0) - ISNULL(ECRIB.MTHT,0)) ELSE (ISNULL(ECRIB.MTTC,0) - ISNULL(ECRIB.MTHT,0))*(-1) END) ELSE 0 END) AS MT_REALISE_TVA,
       SUM(CASE WHEN ECRIB.CSTE = 'EG' AND ISNULL(LEN(RTRIM(ECRIB.CJOURNAL)),0) <> 0 THEN (CASE WHEN SENS = 'C' THEN ECRIB.MTTC ELSE ECRIB.MTTC *(-1) END)ELSE 0 END)  AS MT_REALISE_TTC,

       MAX(CASE WHEN ECRIB.CSTE = 'RE' THEN ECRIB.DATEC END) AS DT_REALISE

FROM ESTIA_INTBT AS INTBT
     INNER JOIN ESTIA_ECRIB AS ECRIB
           ON ECRIB.CORG = INTBT.CORG
           AND ECRIB.NOBON = INTBT.NOINTBT
           AND ECRIB.TYPBON = INTBT.CSTE1

GROUP BY INTBT.CORG, INTBT.NOINTBT, INTBT.CSTE1

PRINT 'WRK_INTBT_ECRIB: TABLE DE TRAVAIL SUR LES MONTANTS AU NIVEAU DES BONS DE TRAVAUX'
*/
--####################################################################################################################
--################################################# WRK_OS_PECRIP ##################################################
--####################################################################################################################

---- WRK_PABASIT: CUMULS DE L'OS INITIAL ET DES AVENANTS ------------------

TRUNCATE TABLE WRK_PABASIT

INSERT INTO WRK_PABASIT (PK_PABASIT, FK_POPE,FK_PDEPOP,CORG, COPE, CDEPR, NORD, SITUAT, NOLIG, LIB, MT, TYPE, CFOUR, DECR, DSIGN, MTTVA, MTTTC, FORMPX, DSOUMIS, DORDS, TRIGD, MTVALASM, MTTCLASM, HTBASE, CTRANCHE, DEFFET, TEMIMPUT, CPHASE, TEMIGRA, CMOTIF, HTD, CNATPRES, CNOMENM, DCOMNOT, NOCOMM, DDEXEC, DELAI, MIGCOMPT)
SELECT max(PK_PABASIT), FK_POPE,FK_PDEPOP,CORG, COPE, CDEPR, NORD, max(SITUAT), max(NOLIG), max(LIB), sum(MT), max(TYPE), CFOUR, max(DECR), max(DSIGN), sum(MTTVA), sum(MTTTC), 
max(FORMPX), max(DSOUMIS), max(DORDS), max(TRIGD), sum(MTVALASM), sum(MTTCLASM),SUM( HTBASE), CTRANCHE, max(DEFFET), 
max(TEMIMPUT), max(CPHASE), max(TEMIGRA), max(CMOTIF), sum(HTD), max(CNATPRES), max(CNOMENM), max(DCOMNOT), max(NOCOMM), 
max(DDEXEC), max(DELAI), max(MIGCOMPT)
from ESTIA_PABASIT PABASIT
GROUP BY FK_POPE,FK_PDEPOP,CORG, COPE, CDEPR, NORD, CFOUR,  CTRANCHE


--WRK_OS_PECRIP: TABLE DE TRAVAIL SUR LES MONTANTS AU NIVEAU DES POSTES DE DEPENSES DES CHANTIERS
--TRUNCATE TABLE WRK_OS_PECRIP

--INSERT INTO WRK_OS_PECRIP (CORG, COPE,CTRANCHE, CDEPR, NORD, OS, CFOUR, CSTE1, MT_ENGAGEMENT_INITIAL_HT, MT_ENGAGEMENT_INITIAL_TVA, MT_ENGAGEMENT_INITIAL_TTC, MT_ENGAGEMENT_RESTANT_HT, MT_ENGAGEMENT_RESTANT_TVA, MT_ENGAGEMENT_RESTANT_TTC, MT_REALISE_HT, MT_REALISE_TVA, MT_REALISE_TTC, DT_REALISE)
--SELECT	PABASIT.CORG
--	  , PABASIT.COPE
--	  , PABASIT.CTRANCHE
--	  , PABASIT.CDEPR
--	  , PABASIT.NORD
--	  , PABASIT.COPE + CONVERT(VARCHAR(3),PABASIT.CDEPR) + CONVERT(VARCHAR(2), PABASIT.NORD) AS OS
--	  , PECRIP.CFOUR
--	  , 'OS' AS CSTE1
--	  , PABASIT.MT AS MT_ENGAGEMENT_INITIAL_HT
--	  , PABASIT.MTTVA AS MT_ENGAGEMENT_INITIAL_TVA
--	  , PABASIT.MTTTC AS MT_ENGAGEMENT_INITIAL_TTC
--	  , PABASIT.MT - SUM(CASE WHEN PECRIP.TYPCPTA = 'EC' and PECRIP.TRAIT = 'RFD' THEN (CASE WHEN PECRIP.SENS = 'D' THEN PECRIP.MONTANT ELSE -PECRIP.MONTANT END) ELSE 0 END) AS MT_ENGAGEMENT_RESTANT_HT
--	  , PABASIT.MTTVA - SUM(CASE WHEN PECRIP.TYPCPTA = 'RZ' and PECRIP.TRAIT = 'RFD' and CTYPECRI ='FAC'  THEN (CASE WHEN PECRIP.SENS = 'D' THEN PECRIP.MONTANT ELSE -PECRIP.MONTANT END) ELSE 0 END) AS MT_ENGAGEMENT_RESTANT_TVA
--	  , PABASIT.MTTTC - SUM(CASE WHEN PECRIP.TYPCPTA = 'TF' and PECRIP.TRAIT = 'RFD' and CTYPECRI ='FAC'  THEN (CASE WHEN PECRIP.SENS = 'C' THEN PECRIP.MONTANT ELSE -PECRIP.MONTANT END) ELSE 0 END)AS MT_ENGAGEMENT_RESTANT_TTC
--	  , SUM(CASE WHEN PECRIP.TYPCPTA = 'EC' and PECRIP.TRAIT in( 'RFD') THEN (CASE WHEN PECRIP.SENS = 'D' THEN PECRIP.MONTANT ELSE -PECRIP.MONTANT END) ELSE 0 END) AS MT_REALISE_HT
--	  , SUM(CASE WHEN PECRIP.TYPCPTA = 'RZ' and PECRIP.TRAIT = 'RFD' and CTYPECRI ='FAC'  THEN (CASE WHEN PECRIP.SENS = 'D' THEN PECRIP.MONTANT ELSE -PECRIP.MONTANT END) ELSE 0 END) AS MT_REALISE_TVA
--	  , SUM(CASE WHEN PECRIP.TYPCPTA = 'TF' and PECRIP.TRAIT = 'RFD' and CTYPECRI ='FAC'  THEN (CASE WHEN PECRIP.SENS = 'C' THEN PECRIP.MONTANT ELSE -PECRIP.MONTANT END) ELSE 0 END) AS MT_REALISE_TTC
--	  , MAX(CASE WHEN PECRIP.TYPCPTA = 'EC' and PECRIP.TRAIT = 'RFD' THEN PECRIP.DECR END) AS DT_REALISE
--FROM WRK_PABASIT AS PABASIT
--     INNER JOIN ESTIA_PECRIP AS PECRIP
--           ON PECRIP.CORG = PABASIT.CORG
--           AND PECRIP.COPE = PABASIT.COPE
--           and PECRIP.CTRANCHE = PABASIT.CTRANCHE
--           AND PECRIP.LOTDEP = PABASIT.CDEPR
--           and PECRIP.NORD = PABASIT.NORD
--           and PECRIP.CFOUR = PABASIT.CFOUR
--GROUP BY PABASIT.CORG, PABASIT.COPE ,PABASIT.CTRANCHE,PABASIT.CDEPR, PABASIT.NORD, PECRIP.CFOUR,PABASIT.MT, PABASIT.MTTVA, PABASIT.MTTTC

--PRINT 'WRK_OS_PECRIP: TABLE DE TRAVAIL SUR LES MONTANTS AU NIVEAU DES POSTES DE DEPENSES DES CHANTIERS'


--####################################################################################################################
--################################################### WRK_BASELOC ####################################################
--####################################################################################################################

--WRK_BASELOC: TABLE DE TRAVAIL SUR LES TANTIEMES
TRUNCATE TABLE WRK_BASELOC
INSERT INTO WRK_BASELOC (FK_BASELOC, FK_ORG, FK_AGENCE, FK_GROUPE, FK_IMMEUB, FK_LOCAL, FK_BASE, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, CBASE, DEFFET, VAL_TANTIEMES, RK)
SELECT FK_BASELOC, FK_ORG, FK_AGENCE, FK_GROUPE, FK_IMMEUB, FK_LOCAL, FK_BASE,
       CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, CBASE,
       CASE WHEN DEFFET < '1900-01-01' THEN CONVERT(DATETIME, '02/01/1900', 103) ELSE DEFFET END AS DEFFET,
       MONTANT AS VAL_TANTIEMES,
       RANK() OVER (PARTITION BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, CBASE
                    ORDER BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, CBASE, DEFFET) AS RK
FROM ESTIA_BASELOC

UPDATE WRK_BASELOC
SET DT_FIN = DATEADD(day, -1, WS.DEFFET)
FROM WRK_BASELOC
     INNER JOIN WRK_BASELOC AS WS
           ON WS.CORG = WRK_BASELOC.CORG
           AND WS.CAGENCE = WRK_BASELOC.CAGENCE
           AND WS.CGROUPE = WRK_BASELOC.CGROUPE
           AND WS.CIMMEUB = WRK_BASELOC.CIMMEUB
           AND WS.CLOCAL = WRK_BASELOC.CLOCAL
           AND WS.CBASE = WRK_BASELOC.CBASE
           AND WS.RK = WRK_BASELOC.RK + 1

UPDATE WRK_BASELOC
SET VAL_BASE = (SELECT SUM(W.VAL_TANTIEMES)
                FROM WRK_BASELOC AS W
                WHERE W.CORG = WRK_BASELOC.CORG
                AND W.CAGENCE = WRK_BASELOC.CAGENCE
                AND W.CGROUPE = WRK_BASELOC.CGROUPE
                AND W.CBASE = WRK_BASELOC.CBASE
                AND ISNULL(WRK_BASELOC.DT_FIN, '2999/01/01') BETWEEN W.DEFFET AND ISNULL(W.DT_FIN, '2999/01/01'))

PRINT 'WRK_BASELOC: TABLE DE TRAVAIL SUR LES TANTIEMES'



--####################################################################################################################
--################################################ WRK_POPE_TRANCHE #################################################
--####################################################################################################################

--WRK_POPE_TRANCHE: TABLE DES TRANCHES RAMENEES AU NIVEAU DES OPERATIONS
TRUNCATE TABLE WRK_POPE_TRANCHE
INSERT INTO WRK_POPE_TRANCHE (CORG, COPE, DDEXEC, DFEXEC, DFINPREV, DCLOTU)
SELECT CORG, COPE, MIN(DDEXEC) AS DDEXEC, MAX(DFEXEC) AS DFEXEC,
       MAX(DFINPREV) AS DFINPREV,
       CASE WHEN SUM(CASE WHEN DCLOTU IS NULL THEN 1 ELSE 0 END) = 0 THEN MAX(DCLOTU) END AS DCLOTU
FROM ESTIA_TRANCHE
WHERE CORG IS NOT NULL
AND COPE IS NOT NULL
GROUP BY CORG, COPE

--####################################################################################################################
--################################################ WRK_POPS1 #################################################
--####################################################################################################################

--WRK_POPS1: TABLE DES BUDGETS PAR TRANCHES 
/*TRUNCATE TABLE WRK_POPS1
INSERT INTO WRK_POPS1 (CORG, COPE, CTRANCHE, CDEPR, LDEPR, MTHT, MTTTC,MTVA)
SELECT POSP1.CORG ,POSP1.COPE, POSP1.CTRANCHE ,
MAX(CASE PDEPR.cdepr  WHEN  PDEPR.cnatdep THEN PDEPR.cdepr ELSE PDEPR.cnatdep END) AS CRITERE_BUDGETAIRE, 
MAX(CASE PDEPR.cdepr  WHEN  PDEPR.cnatdep THEN PDEPR.ldepr ELSE '' END) AS LIBELLE_BUDGETAIRE, 
SUM(POSP1.MTHT) AS MTHT_BUDGET, SUM(POSP1.mtva) AS MTHT_BUDGET, SUM(POSP1.mtttc) AS MTHT_BUDGET
from ESTIA_pops1 AS POSP1
LEFT OUTER JOIN ESTIA_pdepr AS PDEPR ON PDEPR.cdepr = POSP1.cdepp 
where POSP1.type ='A'
and POSP1.detreg='R'
and PDEPR.cnatdep<>'HONO' 
group by POSP1.CORG ,POSP1.COPE, POSP1.CTRANCHE*/


--####################################################################################################################
--############################################### WRK_ECHEANCIER_BAIL ################################################
--####################################################################################################################

--WRK_ECHEANCIER_BAIL: TABLE DE TRAVAIL D'ECHEANCIER DES BAUX
BEGIN TRAN

CREATE TABLE #TEMPS
(
	DT_DEBUT  DATETIME NOT NULL PRIMARY KEY,
	DT_FIN    DATETIME NOT NULL
)
INSERT INTO #TEMPS (DT_DEBUT, DT_FIN)
SELECT MIN(PK_TEMPS) AS DT_DEBUT, MAX(PK_TEMPS) AS DT_FIN
FROM SAFIR_ESTIA..D_TEMPS
GROUP BY CD_MOIS

TRUNCATE TABLE WRK_ECHEANCIER_BAIL
INSERT INTO WRK_ECHEANCIER_BAIL (CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CCOMPTE, NOBAIL, DATENTQUIT, DATSORQUIT, PERIOD, CRUB, CMETHCAL, DDEB, DFIN, DT_DEBUT_MOIS, DT_FIN_MOIS, DT_DEBUT, DT_FIN, NB_HQLOCAT)
SELECT LOCATION.CORG, LOCATION.CAGENCE, LOCATION.CGROUPE, LOCATION.CIMMEUB, LOCATION.CLOCAL, LOCATION.OCC,
       LOCATION.CCOMPTE, LOCATION.NOBAIL, LOCATION.DATENTQUIT, LOCATION.DATSORQUIT, LOCATION.PERIOD,
       HQLOCAT.CRUB, RUB.CMETHCAL, HQLOCAT.DDEB, HQLOCAT.DFIN,
       TEMPS.DT_DEBUT AS DT_DEBUT_MOIS, TEMPS.DT_FIN AS DT_FIN_MOIS,
       CASE WHEN LOCATION.DATENTQUIT > HQLOCAT.DDEB
            THEN CASE WHEN LOCATION.DATENTQUIT > TEMPS.DT_DEBUT THEN LOCATION.DATENTQUIT ELSE TEMPS.DT_DEBUT END
            ELSE CASE WHEN HQLOCAT.DDEB > TEMPS.DT_DEBUT THEN HQLOCAT.DDEB ELSE TEMPS.DT_DEBUT END
       END AS DT_DEBUT,
       CASE WHEN LOCATION.DATSORQUIT < ISNULL(HQLOCAT.DFIN, '2999/01/01')
            THEN CASE WHEN LOCATION.DATSORQUIT < TEMPS.DT_FIN THEN LOCATION.DATSORQUIT ELSE TEMPS.DT_FIN END
            ELSE CASE WHEN HQLOCAT.DFIN < TEMPS.DT_FIN THEN HQLOCAT.DFIN ELSE TEMPS.DT_FIN END
       END AS DT_FIN,
       HQLOCAT.NB
FROM ESTIA_LOCATION AS LOCATION
     INNER JOIN ESTIA_HQLOCAT AS HQLOCAT
           ON HQLOCAT.CORG = LOCATION.CORG
           AND HQLOCAT.CAGENCE = LOCATION.CAGENCE
           AND HQLOCAT.CGROUPE = LOCATION.CGROUPE
           AND HQLOCAT.CIMMEUB = LOCATION.CIMMEUB
           AND HQLOCAT.CLOCAL = LOCATION.CLOCAL
           AND HQLOCAT.OCC = LOCATION.OCC
     INNER JOIN ESTIA_RUB AS RUB
           ON RUB.CRUB = HQLOCAT.CRUB
     INNER JOIN #TEMPS AS TEMPS
           ON TEMPS.DT_DEBUT <= ISNULL(HQLOCAT.DFIN, '2999/01/01')
           AND TEMPS.DT_DEBUT <= ISNULL(LOCATION.DATSORQUIT, '2999/01/01')
           AND TEMPS.DT_FIN >= HQLOCAT.DDEB
           AND TEMPS.DT_FIN >= LOCATION.DATENTQUIT
WHERE RUB.CMETHCAL = 19
ORDER BY LOCATION.CORG, LOCATION.CAGENCE, LOCATION.CGROUPE, LOCATION.CIMMEUB, LOCATION.CLOCAL, LOCATION.OCC,
       LOCATION.CCOMPTE, LOCATION.NOBAIL, LOCATION.DATENTQUIT, LOCATION.DATSORQUIT,
       HQLOCAT.CRUB, RUB.CMETHCAL, HQLOCAT.DDEB, HQLOCAT.DFIN,
       TEMPS.DT_DEBUT, TEMPS.DT_FIN

--METHODES DE CALCUL DES RUBRIQUES
--  3: Forfait (ex: provisions pour charges)
--  4: Accumulateur (ex: DG)
-- 19: Forfait annuel (ex: loyers)
-- 23: Forfait échéance (ex: facturation ponctuelle)

DROP TABLE #TEMPS

CREATE TABLE #ECHREV
(
	CORG     VARCHAR(2) NOT NULL,
	CAGENCE  VARCHAR(2) NOT NULL,
	CGROUPE  INT NOT NULL,
	CIMMEUB  INT NOT NULL,
	CLOCAL   INT NOT NULL,
	OCC      INT NOT NULL,
	CRUB     INT NOT NULL,
	DREVIS   DATETIME NOT NULL,
	ANCNB    NUMERIC(18, 3) NOT NULL,
	NB       NUMERIC(18, 3) NOT NULL
)


INSERT INTO #ECHREV (CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, DREVIS, ANCNB, NB)
SELECT CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, DREVIS, SUM(ANCNB) AS ANCNB, SUM(NB) AS NB
FROM ESTIA_HREVI
WHERE YEAR(DREVIS) >= 1900
AND ANCNB IS NOT NULL
AND NB IS NOT NULL
GROUP BY CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CRUB, DREVIS


UPDATE WRK_ECHEANCIER_BAIL
SET DT_DEBUT = E.DREVIS,
DREVIS = E.DREVIS,
NB_HREVIS = E.NB
OUTPUT DELETED.CORG, DELETED.CAGENCE, DELETED.CGROUPE, DELETED.CIMMEUB, DELETED.CLOCAL, DELETED.OCC,
       DELETED.CCOMPTE, DELETED.NOBAIL, DELETED.DATENTQUIT, DELETED.DATSORQUIT, DELETED.PERIOD,
       DELETED.CRUB, DELETED.CMETHCAL, DELETED.DDEB, DELETED.DFIN, DELETED.DT_DEBUT_MOIS, DELETED.DT_FIN_MOIS,
       DELETED.DT_DEBUT,
       DATEADD(day, -1, INSERTED.DREVIS) AS DT_FIN,
       DELETED.NB_HQLOCAT,
       DATEADD(day, -1, INSERTED.DREVIS) AS DREVIS
INTO WRK_ECHEANCIER_BAIL (CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CCOMPTE, NOBAIL, DATENTQUIT, DATSORQUIT, PERIOD, CRUB, CMETHCAL, DDEB, DFIN, DT_DEBUT_MOIS, DT_FIN_MOIS, DT_DEBUT, DT_FIN, NB_HQLOCAT, DREVIS)
FROM WRK_ECHEANCIER_BAIL AS W
     INNER JOIN #ECHREV AS E
           ON E.CORG = W.CORG
           AND E.CAGENCE = W.CAGENCE
           AND E.CGROUPE = W.CGROUPE
           AND E.CIMMEUB = W.CIMMEUB
           AND E.CLOCAL = W.CLOCAL
           AND E.OCC = W.OCC
           AND E.CRUB = W.CRUB
           AND E.DREVIS BETWEEN W.DT_DEBUT_MOIS AND W.DT_FIN_MOIS



UPDATE WRK_ECHEANCIER_BAIL
SET NB_HQLOCAT = E.NB
FROM WRK_ECHEANCIER_BAIL AS W
     INNER JOIN #ECHREV AS E
           ON E.CORG = W.CORG
           AND E.CAGENCE = W.CAGENCE
           AND E.CGROUPE = W.CGROUPE
           AND E.CIMMEUB = W.CIMMEUB
           AND E.CLOCAL = W.CLOCAL
           AND E.OCC = W.OCC
           AND E.CRUB = W.CRUB
           and DATEDIFF(MONTH, E.DREVIS, W.DT_DEBUT_MOIS) > 0 AND (MONTH(W.DT_DEBUT_MOIS) + 2) % 3 IN (1,2) 
		   and DATEDIFF(MONTH, E.DREVIS, W.DT_DEBUT_MOIS) < 3 
           -- bsol : 2012-12-04 : prendre les annuels
           -- and W.PERIOD =3
           and W.PERIOD >=3


DROP TABLE #ECHREV


UPDATE WRK_ECHEANCIER_BAIL
SET NB_JOURS = DATEDIFF(day, DT_DEBUT, DT_FIN)+1,
NB_JOURS_MOIS = DATEDIFF(day, DT_DEBUT_MOIS, DT_FIN_MOIS)+1


DELETE FROM WRK_ECHEANCIER_BAIL WHERE NB_JOURS <= 1


COMMIT


--####################################################################################################################
--################################################### WRK_RUB_TAX ####################################################
--####################################################################################################################

--WRK_RUB_TAX: TABLE DE TRAVAIL SUR LES TAXES AU NIVEAU DES RUBRIQUES
TRUNCATE TABLE WRK_RUB_TAX
INSERT INTO WRK_RUB_TAX (CRUB, LRUB, CNATRUB, CTYPTAX, CRUBTAX, VALTAUX)
SELECT RUB.CRUB, RUB.LRUB, RUB.CNATRUB, RUB.CTYPTAX, RUB.CRUBTAX, ISNULL(TAUX.MONTANT, 0) AS VALTAUX
FROM /*(SELECT CRUB, LRUB, CNATRUB, CTYPTAX,
             CASE WHEN ISNUMERIC(LEFT(CRUBTAX, CHARINDEX(';', CRUBTAX) - 1)) <> 0
                  THEN CONVERT(NUMERIC(3,0), LEFT(CRUBTAX, CHARINDEX(';', CRUBTAX) - 1))
             END AS CRUBTAX
      FROM (SELECT CRUB, LRUB, CNATRUB, CTYPTAX, REPLACE(CRUBTAX, '81;', '') AS CRUBTAX FROM ESTIA_RUB) AS RUB)*/ ESTIA_RUB AS RUB
      LEFT JOIN ESTIA_TAUX AS TAUX
           ON TAUX.CRUB = RUB.CRUBTAX
           AND GETDATE() BETWEEN TAUX.DDEB AND TAUX.DFIN


--####################################################################################################################
--################################################## WRK_HISTO_LOT ###################################################
--####################################################################################################################

PRINT '-------------------------------------------------------'
PRINT 'DEBUT DU REMPLISSAGE DE LA TABLE D''HISTORIQUE DES LOTS'


TRUNCATE TABLE WRK_HISTO_LOT

--AJOUT DES LOTS LOUES ET LOTS JAMAIS LOUES
INSERT INTO WRK_HISTO_LOT (FK_ORG, FK_AGENCE, FK_GROUPE, FK_IMMEUB, FK_LOCAL, FK_BAIL, FK_TIERS, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, OCC, CD_STATUT, CTYPLOG, LTYPLOG, IND_ETAT_LOCATIF, NM_LOT_PRINCIPAL, IND_LOT_PRINCIPAL, CCOMPTE, NOBAIL, CBAIL, DATENTQUIT, DATSORQUIT, DT_DEBUT_RAT, DT_FIN_RAT, CTYPTIERS, CTIERS, LTIERS, POUM, RK_LOCATION, RK_LOCATION_INV)

SELECT LOCAL.FK_ORG, LOCAL.FK_AGENCE, LOCAL.FK_GROUPE, LOCAL.FK_IMMEUB, LOCAL.PK_LOCAL AS FK_LOCAL, BAIL.PK_LOCATION AS FK_BAIL, BAIL.FK_TIERS,
       LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL, LOCATION.OCC,
       CASE WHEN LOCATION.CLOCAL IS NULL THEN 'V' ELSE 'L' END AS CD_STATUT,
       PLOCAL.CTYPLOG, PTL.LB_TYPE_LOT AS LTYPLOG, PTL.IND_ETAT_LOCATIF, BAIL.CLOCAL AS NM_LOT_PRINCIPAL,
       CASE WHEN LOCATION.NOLOCAT = LOCATION.CONTLOC THEN 'O' ELSE 'N' END AS IND_LOT_PRINCIPAL,
       LOCATION.CCOMPTE, LOCATION.NOBAIL, LOCATION.CBAIL, LOCATION.DATENTQUIT, LOCATION.DATSORQUIT,
       LOCATION.DATENTQUIT AS DT_DEBUT_RAT, LOCATION.DATSORQUIT AS DT_FIN_RAT,
       TIERS.CTYPTIERS, TIERS.CTIERS, TIERS.LTIERS, TIERS.POUM,
       RANK() OVER (PARTITION BY LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL
                    ORDER BY LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL, LOCATION.DATENTQUIT, ISNULL(LOCATION.DATSORQUIT,'9999/01/01'), LOCATION.OCC, LOCATION.PK_LOCATION) AS RK_LOCATION,
       RANK() OVER (PARTITION BY LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL
                    ORDER BY LOCAL.CORG, LOCAL.CAGENCE, LOCAL.CGROUPE, LOCAL.CIMMEUB, LOCAL.CLOCAL, LOCATION.DATENTQUIT DESC, ISNULL(LOCATION.DATSORQUIT,'9999/01/01') DESC, LOCATION.OCC DESC, LOCATION.PK_LOCATION DESC) AS RK_LOCATION_INV
FROM ESTIA_LOCAL AS LOCAL
     INNER JOIN ESTIA_PLOCAL AS PLOCAL
           ON PLOCAL.CORG = LOCAL.CORG
           AND PLOCAL.CAGENCE = LOCAL.CAGENCE
           AND PLOCAL.CGROUPE = LOCAL.CGROUPE
           AND PLOCAL.CIMMEUB = LOCAL.CIMMEUB
           AND PLOCAL.CPLOCAL = LOCAL.CLOCAL
     LEFT JOIN ESTIA_LOCATION AS LOCATION
          ON LOCATION.CORG = LOCAL.CORG
          AND LOCATION.CAGENCE = LOCAL.CAGENCE
          AND LOCATION.CGROUPE = LOCAL.CGROUPE
          AND LOCATION.CIMMEUB = LOCAL.CIMMEUB
          AND LOCATION.CLOCAL = LOCAL.CLOCAL
     LEFT JOIN ESTIA_LOCATION AS BAIL
          ON BAIL.CORG = LOCATION.CORG
          AND BAIL.CCOMPTE = LOCATION.CCOMPTE
          AND BAIL.NOBAIL = LOCATION.NOBAIL
          AND BAIL.CONTLOC = BAIL.NOLOCAT

     LEFT JOIN ESTIA_LIENLOC AS LIENLOC
          ON LIENLOC.CORG = LOCATION.CORG
          AND LIENLOC.CCOMPTE = LOCATION.CCOMPTE
          AND LIENLOC.RK = 1
     LEFT JOIN ESTIA_TIERS AS TIERS
          ON TIERS.CTYPTIERS = LIENLOC.CTYPTIERS
          AND TIERS.CTIERS = LIENLOC.CTIERS

     LEFT JOIN P_TYPE_LOT AS PTL
          ON PTL.CD_TYPE_LOT = PLOCAL.CTYPLOG


--MISE A JOUR DU BAIL PRECEDENT ET BAIL SUIVANT
UPDATE WRK_HISTO_LOT
SET FK_BAIL_PREC = HP.FK_BAIL,
FK_TIERS_PREC = HP.FK_TIERS,
OCC_PREC = HP.OCC,
CCOMPTE_PREC = HP.CCOMPTE,
NOBAIL_PREC = HP.NOBAIL,
CTYPTIERS_PREC = HP.CTYPTIERS,
CTIERS_PREC = HP.CTIERS,
LTIERS_PREC = HP.LTIERS,
DT_ENTREE_PREC = HP.DT_DEBUT_RAT,
DT_SORTIE_PREC = HP.DT_FIN_RAT
FROM WRK_HISTO_LOT
     INNER JOIN WRK_HISTO_LOT AS HP
          ON HP.CORG = WRK_HISTO_LOT.CORG
          AND HP.CAGENCE = WRK_HISTO_LOT.CAGENCE
          AND HP.CGROUPE = WRK_HISTO_LOT.CGROUPE
          AND HP.CIMMEUB = WRK_HISTO_LOT.CIMMEUB
          AND HP.CLOCAL = WRK_HISTO_LOT.CLOCAL
          AND HP.RK_LOCATION = WRK_HISTO_LOT.RK_LOCATION - 1

UPDATE WRK_HISTO_LOT
SET FK_BAIL_SUIV = HS.FK_BAIL,
FK_TIERS_SUIV = HS.FK_TIERS,
OCC_SUIV = HS.OCC,
CCOMPTE_SUIV = HS.CCOMPTE,
NOBAIL_SUIV = HS.NOBAIL,
CTYPTIERS_SUIV = HS.CTYPTIERS,
CTIERS_SUIV = HS.CTIERS,
LTIERS_SUIV = HS.LTIERS,
DT_ENTREE_SUIV = HS.DT_DEBUT_RAT,
DT_SORTIE_SUIV = HS.DT_FIN_RAT
FROM WRK_HISTO_LOT
     INNER JOIN WRK_HISTO_LOT AS HS
          ON HS.CORG = WRK_HISTO_LOT.CORG
          AND HS.CAGENCE = WRK_HISTO_LOT.CAGENCE
          AND HS.CGROUPE = WRK_HISTO_LOT.CGROUPE
          AND HS.CIMMEUB = WRK_HISTO_LOT.CIMMEUB
          AND HS.CLOCAL = WRK_HISTO_LOT.CLOCAL
          AND HS.RK_LOCATION = WRK_HISTO_LOT.RK_LOCATION + 1


--AJOUT DES VACANTS ENTRE LES LOCATIONS
INSERT INTO WRK_HISTO_LOT (FK_ORG, FK_AGENCE, FK_GROUPE, FK_IMMEUB, FK_LOCAL, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, CD_STATUT, CTYPLOG, LTYPLOG, IND_ETAT_LOCATIF, DT_DEBUT_RAT, DT_FIN_RAT, FK_BAIL_PREC, FK_TIERS_PREC, OCC_PREC, CCOMPTE_PREC, NOBAIL_PREC, CTYPTIERS_PREC, CTIERS_PREC, LTIERS_PREC, DT_ENTREE_PREC, DT_SORTIE_PREC, FK_BAIL_SUIV, FK_TIERS_SUIV, OCC_SUIV, CCOMPTE_SUIV, NOBAIL_SUIV, CTYPTIERS_SUIV, CTIERS_SUIV, LTIERS_SUIV, DT_ENTREE_SUIV, DT_SORTIE_SUIV)
SELECT H1.FK_ORG, H1.FK_AGENCE, H1.FK_GROUPE, H1.FK_IMMEUB, H1.FK_LOCAL,
       H1.CORG, H1.CAGENCE, H1.CGROUPE, H1.CIMMEUB, H1.CLOCAL, 'V' AS CD_STATUT, H1.CTYPLOG, H1.LTYPLOG, H1.IND_ETAT_LOCATIF,
       DATEADD(day,  1, H1.DATSORQUIT) AS DT_DEBUT_RAT,
       DATEADD(day, -1, H2.DATENTQUIT) AS DT_FIN_RAT,
       H1.FK_BAIL AS FK_BAIL_PREC, H1.FK_TIERS AS FK_TIERS_PREC, H1.OCC AS OCC_PREC, H1.CCOMPTE AS CCOMPTE_PREC, H1.NOBAIL AS NOBAIL_PREC, H1.CTYPTIERS AS CTYPTIERS_PREC, H1.CTIERS AS CTIERS_PREC, H1.LTIERS AS LTIERS_PREC, H1.DT_DEBUT_RAT AS DT_ENTREE_PREC, H1.DT_FIN_RAT AS DT_SORTIE_PREC,
       H2.FK_BAIL AS FK_BAIL_SUIV, H2.FK_TIERS AS FK_TIERS_SUIV, H2.OCC AS OCC_SUIV, H2.CCOMPTE AS CCOMPTE_SUIV, H2.NOBAIL AS NOBAIL_SUIV, H2.CTYPTIERS AS CTYPTIERS_SUIV, H2.CTIERS AS CTIERS_SUIV, H2.LTIERS AS LTIERS_SUIV, H2.DT_DEBUT_RAT AS DT_ENTREE_SUIV, H2.DT_FIN_RAT AS DT_SORTIE_SUIV
FROM WRK_HISTO_LOT AS H1
     INNER JOIN WRK_HISTO_LOT AS H2
          ON H2.CORG = H1.CORG
          AND H2.CAGENCE = H1.CAGENCE
          AND H2.CGROUPE = H1.CGROUPE
          AND H2.CIMMEUB = H1.CIMMEUB
          AND H2.CLOCAL = H1.CLOCAL
          AND H2.RK_LOCATION = H1.RK_LOCATION + 1
          AND H2.DT_DEBUT_RAT > DATEADD(day, 1, H1.DT_FIN_RAT)


--AJOUT DES LOTS VACANTS APRES LA DERNIERE OCCUPATION
INSERT INTO WRK_HISTO_LOT (FK_ORG, FK_AGENCE, FK_GROUPE, FK_IMMEUB, FK_LOCAL, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, CD_STATUT, CTYPLOG, LTYPLOG, IND_ETAT_LOCATIF, DT_DEBUT_RAT, DT_FIN_RAT, FK_BAIL_PREC, FK_TIERS_PREC, OCC_PREC, CCOMPTE_PREC, NOBAIL_PREC, CTYPTIERS_PREC, CTIERS_PREC, LTIERS_PREC, DT_ENTREE_PREC, DT_SORTIE_PREC)
SELECT W.FK_ORG, W.FK_AGENCE, W.FK_GROUPE, W.FK_IMMEUB, W.FK_LOCAL,
       W.CORG, W.CAGENCE, W.CGROUPE, W.CIMMEUB, W.CLOCAL, 'V' AS CD_STATUT, W.CTYPLOG, W.LTYPLOG, W.IND_ETAT_LOCATIF,
       DATEADD(day, 1, W.DT_FIN_RAT) AS DT_DEBUT_RAT, L.DFINML AS DT_FIN_RAT, W.FK_BAIL, W.FK_TIERS, W.OCC, W.CCOMPTE, W.NOBAIL, W.CTYPTIERS, W.CTIERS, W.LTIERS,
       W.DT_DEBUT_RAT AS DT_ENTREE_PREC, W.DT_FIN_RAT AS DT_SORTIE_PREC
FROM WRK_HISTO_LOT W
LEFT JOIN ESTIA_LOCAL L
	ON L.CORG = W.CORG
	AND L.CAGENCE = W.CAGENCE
	AND L.CGROUPE = W.CGROUPE
	AND L.CIMMEUB = W.CIMMEUB
	AND L.CLOCAL = W.CLOCAL
WHERE W.RK_LOCATION_INV = 1
AND W.DT_FIN_RAT IS NOT NULL


--AJOUT DES LOTS VACANTS AVANT LA PREMIERE OCCUPATION
INSERT INTO WRK_HISTO_LOT (FK_ORG, FK_AGENCE, FK_GROUPE, FK_IMMEUB, FK_LOCAL, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, CD_STATUT, CTYPLOG, LTYPLOG, IND_ETAT_LOCATIF, DT_DEBUT_RAT, DT_FIN_RAT, FK_BAIL_SUIV, FK_TIERS_SUIV, OCC_SUIV, CCOMPTE_SUIV, NOBAIL_SUIV, CTYPTIERS_SUIV, CTIERS_SUIV, LTIERS_SUIV, DT_ENTREE_SUIV, DT_SORTIE_SUIV)
SELECT FK_ORG, FK_AGENCE, FK_GROUPE, FK_IMMEUB, FK_LOCAL, 
       CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, 'V' AS CD_STATUT, CTYPLOG, LTYPLOG, IND_ETAT_LOCATIF,
       CONVERT(DATETIME, '01/01/1900', 103) AS DT_DEBUT_RAT,
       DATEADD(day, -1, DT_DEBUT_RAT) AS DT_FIN_RAT, FK_BAIL, FK_TIERS, OCC, CCOMPTE, NOBAIL, CTYPTIERS, CTIERS, LTIERS,
       DT_DEBUT_RAT AS DT_ENTREE_SUIV, DT_FIN_RAT AS DT_SORTIE_SUIV
FROM WRK_HISTO_LOT
WHERE RK_LOCATION = 1
AND CCOMPTE IS NOT NULL
AND YEAR(DT_DEBUT_RAT) > 1900


--AJOUT DES LOTS JAMAIS LOUES
INSERT INTO WRK_HISTO_LOT (FK_ORG, FK_AGENCE, FK_GROUPE, FK_IMMEUB, FK_LOCAL, CORG, CAGENCE, CGROUPE, CIMMEUB, CLOCAL, CD_STATUT, CTYPLOG, LTYPLOG, IND_ETAT_LOCATIF, DT_DEBUT_RAT)
SELECT L.FK_ORG, L.FK_AGENCE, L.FK_GROUPE, L.FK_IMMEUB, L.PK_LOCAL AS FK_LOCAL, 
       L.CORG, L.CAGENCE, L.CGROUPE, L.CIMMEUB, L.CLOCAL, 'V' AS CD_STATUT, PLOCAL.CTYPLOG, PTL.LB_TYPE_LOT AS LTYPLOG, PTL.IND_ETAT_LOCATIF,
       CONVERT(DATETIME, '01/01/1900', 103) AS DT_DEBUT_RAT
FROM ESTIA_LOCAL AS L
     INNER JOIN ESTIA_PLOCAL AS PLOCAL
           ON PLOCAL.CORG = L.CORG
           AND PLOCAL.CAGENCE = L.CAGENCE
           AND PLOCAL.CGROUPE = L.CGROUPE
           AND PLOCAL.CIMMEUB = L.CIMMEUB
           AND PLOCAL.CPLOCAL = L.CLOCAL
     LEFT JOIN WRK_HISTO_LOT AS W
          ON W.CORG = L.CORG
          AND W.CAGENCE = L.CAGENCE
          AND W.CGROUPE = L.CGROUPE
          AND W.CIMMEUB = L.CIMMEUB
          AND W.CLOCAL = L.CLOCAL

     LEFT JOIN P_TYPE_LOT AS PTL
          ON PTL.CD_TYPE_LOT = PLOCAL.CTYPLOG

WHERE W.CORG IS NULL


--MISE A JOUR DU MANDAT  !!!! LA TABLE WRK_GROUPE_MANGES DOIT ETRE ALIMENTEE PREALABLEMENT !!!
UPDATE WRK_HISTO_LOT
SET CMANDAT = WGM.CMANDAT,
FK_MANGES = WGM.FK_MANGES,
FK_PROPRIETAIRE = WGM.FK_TIERS
FROM WRK_HISTO_LOT AS WHL
     LEFT JOIN WRK_GROUPE_MANGES AS WGM
          ON WGM.CORG = WHL.CORG
          AND WGM.CAGENCE = WHL.CAGENCE
          AND WGM.CGROUPE = WHL.CGROUPE

-- ASSIGNER LA DATE 01/01/1900 AUX LOTS JAMAIS LOUES AYANT UNE DATE DE DEBUT RAT A NULLE
UPDATE WRK_HISTO_LOT
SET DT_DEBUT_RAT = '01/01/1900'
WHERE DT_DEBUT_RAT IS NULL AND CORG = 11;

PRINT ' FIN DU REMPLISSAGE DE LA TABLE D''HISTORIQUE DES LOTS'
PRINT '-------------------------------------------------------'


SET ANSI_WARNINGS ON

END